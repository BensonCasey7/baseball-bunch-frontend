{"version":3,"sources":["main.912281b2.chunk.css","webpack://src/index.css","webpack://node_modules/foundation-sites/scss/xy-grid/_classes.scss","webpack://node_modules/foundation-sites/scss/xy-grid/_gutters.scss","webpack://node_modules/foundation-sites/scss/xy-grid/_grid.scss","webpack://node_modules/foundation-sites/scss/util/_unit.scss","webpack://node_modules/foundation-sites/scss/util/_breakpoint.scss","webpack://node_modules/foundation-sites/scss/xy-grid/_cell.scss","webpack://node_modules/foundation-sites/scss/util/_math.scss","webpack://node_modules/foundation-sites/scss/xy-grid/_layout.scss","webpack://node_modules/foundation-sites/scss/xy-grid/_collapse.scss","webpack://node_modules/foundation-sites/scss/xy-grid/_position.scss","webpack://node_modules/foundation-sites/scss/xy-grid/_frame.scss","webpack://src/assets/stylesheets/_global.scss","webpack://src/assets/stylesheets/_variables.scss","webpack://src/assets/stylesheets/_alert.scss","webpack://src/assets/stylesheets/_button.scss","webpack://src/assets/stylesheets/_footer.scss","webpack://src/assets/stylesheets/_loading.scss","webpack://src/assets/stylesheets/_navbar.scss","webpack://src/assets/stylesheets/_page.scss","webpack://src/assets/stylesheets/_player.scss","webpack://src/assets/stylesheets/_table.scss","webpack://src/assets/stylesheets/_teams.scss","webpack://src/assets/stylesheets/_typeahead.scss"],"names":[],"mappings":"AAAA,4HAA4H,CCA5H,KACE,QAAS,CACT,mJAEY,CACZ,kCAAmC,CACnC,iCACF,CAEA,KACE,yEAEF,CCAE,gBCoBM,qBAA6D,CAA7D,oBAA6D,CCdnE,eCsEuD,CDrEvD,gBAAiB,CACjB,iBAAkB,CE4JZ,yCJpKN,gBCoBM,sBAA6D,CAA7D,qBAA6D,CDVlE,CAVD,sBCoBM,qBAA6D,CAA7D,oBAA6D,CCdnE,cFFmC,CEGnC,gBAAiB,CACjB,iBAAkB,CE4JZ,yCJpKN,sBCoBM,sBAA6D,CAA7D,qBAA6D,CDfhE,CALH,qBC6BI,eAA6D,CAA7D,cAA6D,CCvBjE,cFEmC,CEDnC,gBAAiB,CACjB,iBAAkB,CFCf,QEaH,oBAAa,CAAb,YAAa,CACb,0BAAA,CAAA,kBAHqB,CFLpB,MK8FD,qBAAM,CAAN,aAAM,CAIJ,YAAe,CACf,WAAc,CAsCd,UAtEiC,CLjEnC,WK4FA,gBAAA,CAAA,QAAM,CL5FN,aK4FA,qBAAA,CAAA,aAAM,CLhFN,8BK2HE,UAlFY,CLlCX,yPAeG,uBAAA,CAAA,eAAgB,CIiHhB,yCJvHJ,uQAMI,uBAAA,CAAA,eAAgB,CACjB,CIgHC,yCJvHJ,yPAMI,uBAAA,CAAA,eAAgB,CACjB,CAYH,+MK6CF,qBAAA,CAAA,aAAM,CL3CH,iBKsFD,cCnByD,CNtDvD,iBKyEF,eCnByD,CNtDvD,iBKyEF,SCnByD,CNtDvD,iBKyEF,eCnByD,CNtDvD,iBKyEF,eCnByD,CNtDvD,iBKyEF,SCnByD,CNtDvD,iBKyEF,eCnByD,CNtDvD,iBKyEF,eCnByD,CNtDvD,iBKyEF,SCnByD,CNtDvD,kBKyEF,eCnByD,CNtDvD,kBKyEF,eCnByD,CNtDvD,kBKyEF,UCnByD,CF+BrD,yCJzGF,qBKkDJ,gBAAM,CAAN,QAAM,CA2CJ,UAlFY,CLTT,kPKgDL,qBAAA,CAAA,aAAM,CL3CH,uBKsFD,UAlFY,CLGT,kBK+EH,cCnByD,CNtDvD,kBKyEF,eCnByD,CNtDvD,kBKyEF,SCnByD,CNtDvD,kBKyEF,eCnByD,CNtDvD,kBKyEF,eCnByD,CNtDvD,kBKyEF,SCnByD,CNtDvD,kBKyEF,eCnByD,CNtDvD,kBKyEF,eCnByD,CNtDvD,kBKyEF,SCnByD,CNtDvD,mBKyEF,eCnByD,CNtDvD,mBKyEF,eCnByD,CNtDvD,mBKyEF,UCnByD,CNnDtD,CIkFC,yCJzGF,oBKkDJ,gBAAM,CAAN,QAAM,CA2CJ,UAlFY,CLTT,qOKgDL,qBAAA,CAAA,aAAM,CL3CH,sBKsFD,UAlFY,CLGT,iBK+EH,cCnByD,CNtDvD,iBKyEF,eCnByD,CNtDvD,iBKyEF,SCnByD,CNtDvD,iBKyEF,eCnByD,CNtDvD,iBKyEF,eCnByD,CNtDvD,iBKyEF,SCnByD,CNtDvD,iBKyEF,eCnByD,CNtDvD,iBKyEF,eCnByD,CNtDvD,iBKyEF,SCnByD,CNtDvD,kBKyEF,eCnByD,CNtDvD,kBKyEF,eCnByD,CNtDvD,kBKyEF,UCnByD,CNnDtD,CAKL,kCACE,UAAW,CACZ,kCAIC,WAAY,CACb,eC1EK,oBAA6D,CAA7D,qBAA6D,CGgJ7D,yCJzCN,eCvGM,qBAA6D,CAA7D,sBAA6D,CDsIlE,CA/BD,qBK6BE,0BAtD8F,CJrE5F,mBAA6D,CAA7D,oBAA6D,CGuI3D,yCJzCN,qBK6BE,2BAtD8F,CJrE5F,oBAA6D,CAA7D,qBAA6D,CD2G1D,CAnCN,4CKmDC,UAlFY,CLmCb,wBK+CC,8BAtD8F,CLa9F,wBKyCA,+BAtD8F,CLa9F,wBKyCA,yBAtD8F,CLa9F,wBKyCA,+BAtD8F,CLa9F,wBKyCA,+BAtD8F,CLa9F,wBKyCA,yBAtD8F,CLa9F,wBKyCA,+BAtD8F,CLa9F,wBKyCA,+BAtD8F,CLa9F,wBKyCA,yBAtD8F,CLa9F,yBKyCA,+BAtD8F,CLa9F,yBKyCA,+BAtD8F,CLa9F,yBKyCA,0BAtD8F,CDkE1F,yCJ/DL,4CKmDC,UAlFY,CLmCb,wBK+CC,+BAtD8F,CLa9F,wBKyCA,gCAtD8F,CLa9F,wBKyCA,0BAtD8F,CLa9F,wBKyCA,gCAtD8F,CLa9F,wBKyCA,gCAtD8F,CLa9F,wBKyCA,0BAtD8F,CLa9F,wBKyCA,gCAtD8F,CLa9F,wBKyCA,gCAtD8F,CLa9F,wBKyCA,0BAtD8F,CLa9F,yBKyCA,gCAtD8F,CLa9F,yBKyCA,gCAtD8F,CLa9F,yBKyCA,2BAtD8F,CLG/F,0DKmDC,UAlFY,CLmCb,yBK+CC,+BAtD8F,CLa9F,yBKyCA,gCAtD8F,CLa9F,yBKyCA,0BAtD8F,CLa9F,yBKyCA,gCAtD8F,CLa9F,yBKyCA,gCAtD8F,CLa9F,yBKyCA,0BAtD8F,CLa9F,yBKyCA,gCAtD8F,CLa9F,yBKyCA,gCAtD8F,CLa9F,yBKyCA,0BAtD8F,CLa9F,0BKyCA,gCAtD8F,CLa9F,0BKyCA,gCAtD8F,CLa9F,0BKyCA,2BAtD8F,CLe7F,CImDG,yCJ/DL,wDKmDC,UAlFY,CLmCb,wBK+CC,+BAtD8F,CLa9F,wBKyCA,gCAtD8F,CLa9F,wBKyCA,0BAtD8F,CLa9F,wBKyCA,gCAtD8F,CLa9F,wBKyCA,gCAtD8F,CLa9F,wBKyCA,0BAtD8F,CLa9F,wBKyCA,gCAtD8F,CLa9F,wBKyCA,gCAtD8F,CLa9F,wBKyCA,0BAtD8F,CLa9F,yBKyCA,gCAtD8F,CLa9F,yBKyCA,gCAtD8F,CLa9F,yBKyCA,2BAtD8F,CLe7F,CA8CH,gCC3IM,qBAA6D,CAA7D,oBAA6D,CGgJ7D,yCJLN,gCC3IM,sBAA6D,CAA7D,qBAA6D,CDgJhE,CAID,2CCpJI,qBAA6D,CAA7D,oBAA6D,CGgJ7D,yCJIJ,2CCpJI,sBAA6D,CAA7D,qBAA6D,CDsJhE,CAXH,sBC3IM,qBAA6D,CAA7D,oBAA6D,CGgJ7D,yCJLN,sBC3IM,sBAA6D,CAA7D,qBAA6D,CD2JhE,CO3JH,kBFoIE,UCnByD,CCjH3D,kBFoIE,SCnByD,CCjH3D,kBFoIE,eCnByD,CCjH3D,kBFoIE,SCnByD,CCjH3D,kBFoIE,SCnByD,CCjH3D,kBFoIE,eCnByD,CCjH3D,kBFoIE,eCnByD,CCjH3D,kBFoIE,WCnByD,CF+BrD,yCGhJN,mBFoIE,UCnByD,CCjH3D,mBFoIE,SCnByD,CCjH3D,mBFoIE,eCnByD,CCjH3D,mBFoIE,SCnByD,CCjH3D,mBFoIE,SCnByD,CCjH3D,mBFoIE,eCnByD,CCjH3D,mBFoIE,eCnByD,CCjH3D,mBFoIE,WCnByD,CC/G1D,CH8IK,yCGhJN,kBFoIE,UCnByD,CCjH3D,kBFoIE,SCnByD,CCjH3D,kBFoIE,eCnByD,CCjH3D,kBFoIE,SCnByD,CCjH3D,kBFoIE,SCnByD,CCjH3D,kBFoIE,eCnByD,CCjH3D,kBFoIE,eCnByD,CCjH3D,kBFoIE,WCnByD,CC/G1D,CAFD,gCFoIE,0BAtD8F,CE9EhG,gCFoIE,yBAtD8F,CE9EhG,gCFoIE,+BAtD8F,CE9EhG,gCFoIE,yBAtD8F,CE9EhG,gCFoIE,yBAtD8F,CE9EhG,gCFoIE,+BAtD8F,CE9EhG,gCFoIE,+BAtD8F,CE9EhG,gCFoIE,2BAtD8F,CDkE1F,yCGhJN,gCFoIE,2BAtD8F,CE9EhG,gCFoIE,0BAtD8F,CE9EhG,gCFoIE,gCAtD8F,CE9EhG,gCFoIE,0BAtD8F,CE9EhG,gCFoIE,0BAtD8F,CE9EhG,gCFoIE,gCAtD8F,CE9EhG,gCFoIE,gCAtD8F,CE9EhG,gCFoIE,4BAtD8F,CE9EhG,iCFoIE,2BAtD8F,CE9EhG,iCFoIE,0BAtD8F,CE9EhG,iCFoIE,gCAtD8F,CE9EhG,iCFoIE,0BAtD8F,CE9EhG,iCFoIE,0BAtD8F,CE9EhG,iCFoIE,gCAtD8F,CE9EhG,iCFoIE,gCAtD8F,CE9EhG,iCFoIE,4BAtD8F,CE5E/F,CH8IK,yCGhJN,gCFoIE,2BAtD8F,CE9EhG,gCFoIE,0BAtD8F,CE9EhG,gCFoIE,gCAtD8F,CE9EhG,gCFoIE,0BAtD8F,CE9EhG,gCFoIE,0BAtD8F,CE9EhG,gCFoIE,gCAtD8F,CE9EhG,gCFoIE,gCAtD8F,CE9EhG,gCFoIE,4BAtD8F,CE5E/F,CCNG,oDAEI,cAA0B,CAA1B,aAA0B,CAE7B,gCHoIH,cCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,SCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,SCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,SCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,UCnByD,CF+BrD,yCI5HI,iCHgHR,cCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,SCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,SCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,SCnByD,CE7FjD,kCHgHR,eCnByD,CE7FjD,kCHgHR,eCnByD,CE7FjD,kCHgHR,UCnByD,CE3FhD,CJ0HL,yCI5HI,gCHgHR,cCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,SCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,SCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,SCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,UCnByD,CE3FhD,CRuLP,wBQ7KE,cAA0B,CAA1B,aAA0B,CAG5B,8BAEI,eAA4B,CAA5B,cAA4B,CJ2G9B,yCIpJF,sDAEI,cAA0B,CAA1B,aAA0B,CAE7B,CJgJC,yCIrII,iCHyHR,cCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,SCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,SCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,SCnByD,CEtGjD,kCHyHR,eCnByD,CEtGjD,kCHyHR,eCnByD,CEtGjD,kCHyHR,UCnByD,CEpGhD,CJmIL,yCI5HI,kCHgHR,cCnByD,CE7FjD,kCHgHR,eCnByD,CE7FjD,kCHgHR,SCnByD,CE7FjD,kCHgHR,eCnByD,CE7FjD,kCHgHR,eCnByD,CE7FjD,kCHgHR,SCnByD,CE7FjD,kCHgHR,eCnByD,CE7FjD,kCHgHR,eCnByD,CE7FjD,kCHgHR,SCnByD,CE7FjD,mCHgHR,eCnByD,CE7FjD,mCHgHR,eCnByD,CE7FjD,mCHgHR,UCnByD,CE3FhD,CJ0HL,yCI5HI,iCHgHR,cCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,SCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,SCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,SCnByD,CE7FjD,kCHgHR,eCnByD,CE7FjD,kCHgHR,eCnByD,CE7FjD,kCHgHR,UCnByD,CE3FhD,CJ0HL,yCJ6DF,yBQ7KE,cAA0B,CAA1B,aAA0B,CAG5B,+BAEI,eAA4B,CAA5B,cAA4B,CAE/B,CJyGC,yCIpJF,oDAEI,cAA0B,CAA1B,aAA0B,CAE7B,CJgJC,yCIrII,gCHyHR,cCnByD,CEtGjD,gCHyHR,eCnByD,CEtGjD,gCHyHR,SCnByD,CEtGjD,gCHyHR,eCnByD,CEtGjD,gCHyHR,eCnByD,CEtGjD,gCHyHR,SCnByD,CEtGjD,gCHyHR,eCnByD,CEtGjD,gCHyHR,eCnByD,CEtGjD,gCHyHR,SCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,UCnByD,CEpGhD,CJmIL,yCIrII,iCHyHR,cCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,SCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,SCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,eCnByD,CEtGjD,iCHyHR,SCnByD,CEtGjD,kCHyHR,eCnByD,CEtGjD,kCHyHR,eCnByD,CEtGjD,kCHyHR,UCnByD,CEpGhD,CJmIL,yCI5HI,gCHgHR,cCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,SCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,SCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,eCnByD,CE7FjD,gCHgHR,SCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,eCnByD,CE7FjD,iCHgHR,UCnByD,CE3FhD,CJ0HL,yCJ6DF,wBQ7KE,cAA0B,CAA1B,aAA0B,CAG5B,8BAEI,eAA4B,CAA5B,cAA4B,CAE/B,CRoLD,gBSvMF,aAA6B,CTyM1B,+BSzMH,mBAA6B,CTuM3B,gBSvMF,oBAA6B,CTyM1B,+BSzMH,oCAA6B,CTuM3B,gBSvMF,qBAA6B,CTyM1B,+BSzMH,qCAA6B,CTuM3B,gBSvMF,eAA6B,CTyM1B,+BSzMH,+BAA6B,CTuM3B,gBSvMF,qBAA6B,CTyM1B,+BSzMH,qCAA6B,CTuM3B,gBSvMF,qBAA6B,CTyM1B,+BSzMH,qCAA6B,CTuM3B,gBSvMF,eAA6B,CTyM1B,+BSzMH,+BAA6B,CTuM3B,gBSvMF,qBAA6B,CTyM1B,+BSzMH,qCAA6B,CTuM3B,gBSvMF,qBAA6B,CTyM1B,+BSzMH,qCAA6B,CTuM3B,gBSvMF,eAA6B,CTyM1B,+BSzMH,+BAA6B,CTuM3B,iBSvMF,qBAA6B,CTyM1B,gCSzMH,qCAA6B,CTuM3B,iBSvMF,qBAA6B,CTyM1B,gCSzMH,qCAA6B,CL4HzB,yCJ2EF,iBSvMF,aAA6B,CTyM1B,gCSzMH,oBAA6B,CTuM3B,iBSvMF,oBAA6B,CTyM1B,gCSzMH,qCAA6B,CTuM3B,iBSvMF,qBAA6B,CTyM1B,gCSzMH,sCAA6B,CTuM3B,iBSvMF,eAA6B,CTyM1B,gCSzMH,gCAA6B,CTuM3B,iBSvMF,qBAA6B,CTyM1B,gCSzMH,sCAA6B,CTuM3B,iBSvMF,qBAA6B,CTyM1B,gCSzMH,sCAA6B,CTuM3B,iBSvMF,eAA6B,CTyM1B,gCSzMH,gCAA6B,CTuM3B,iBSvMF,qBAA6B,CTyM1B,gCSzMH,sCAA6B,CTuM3B,iBSvMF,qBAA6B,CTyM1B,gCSzMH,sCAA6B,CTuM3B,iBSvMF,eAA6B,CTyM1B,gCSzMH,gCAA6B,CTuM3B,kBSvMF,qBAA6B,CTyM1B,iCSzMH,sCAA6B,CTuM3B,kBSvMF,qBAA6B,CTyM1B,iCSzMH,sCAA6B,CT6M1B,CIjFC,yCJ2EF,gBSvMF,aAA6B,CTyM1B,+BSzMH,oBAA6B,CTuM3B,gBSvMF,oBAA6B,CTyM1B,+BSzMH,qCAA6B,CTuM3B,gBSvMF,qBAA6B,CTyM1B,+BSzMH,sCAA6B,CTuM3B,gBSvMF,eAA6B,CTyM1B,+BSzMH,gCAA6B,CTuM3B,gBSvMF,qBAA6B,CTyM1B,+BSzMH,sCAA6B,CTuM3B,gBSvMF,qBAA6B,CTyM1B,+BSzMH,sCAA6B,CTuM3B,gBSvMF,eAA6B,CTyM1B,+BSzMH,gCAA6B,CTuM3B,gBSvMF,qBAA6B,CTyM1B,+BSzMH,sCAA6B,CTuM3B,gBSvMF,qBAA6B,CTyM1B,+BSzMH,sCAA6B,CTuM3B,gBSvMF,eAA6B,CTyM1B,+BSzMH,gCAA6B,CTuM3B,iBSvMF,qBAA6B,CTyM1B,gCSzMH,sCAA6B,CTuM3B,iBSvMF,qBAA6B,CTyM1B,gCSzMH,sCAA6B,CT6M1B,CAzJS,QEtEd,oBAAa,CAAb,YAAa,CACb,+BAAA,CAAA,uBAH6B,CFiP7B,cK1IA,WAAmB,CACnB,eAA2B,CLyI3B,8BK7GE,WAlFY,CL+Ld,yPA2BM,uBAAA,CAAA,eAAgB,CI5HhB,yCJiGN,uQA2BM,uBAAA,CAAA,eAAgB,CACjB,CI7HC,yCJiGN,yPA2BM,uBAAA,CAAA,eAAgB,CACjB,CA5BL,+MKxJA,qBAAA,CAAA,aAAM,CLwJN,iBK7GE,eCnByD,CNgI3D,iBK7GE,gBCnByD,CNgI3D,iBK7GE,UCnByD,CNgI3D,iBK7GE,gBCnByD,CNgI3D,iBK7GE,gBCnByD,CNgI3D,iBK7GE,UCnByD,CNgI3D,iBK7GE,gBCnByD,CNgI3D,iBK7GE,gBCnByD,CNgI3D,iBK7GE,UCnByD,CNgI3D,kBK7GE,gBCnByD,CNgI3D,kBK7GE,gBCnByD,CNgI3D,kBK7GE,WCnByD,CF+BrD,yCJiGN,qBKxJA,gBAAM,CAAN,QAAM,CA2CJ,WAlFY,CL+Ld,kPKxJA,qBAAA,CAAA,aAAM,CLwJN,uBK7GE,WAlFY,CL+Ld,kBK7GE,eCnByD,CNgI3D,kBK7GE,gBCnByD,CNgI3D,kBK7GE,UCnByD,CNgI3D,kBK7GE,gBCnByD,CNgI3D,kBK7GE,gBCnByD,CNgI3D,kBK7GE,UCnByD,CNgI3D,kBK7GE,gBCnByD,CNgI3D,kBK7GE,gBCnByD,CNgI3D,kBK7GE,UCnByD,CNgI3D,mBK7GE,gBCnByD,CNgI3D,mBK7GE,gBCnByD,CNgI3D,mBK7GE,WCnByD,CNyLpD,CI1JD,yCJiGN,o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8F,CLa9F,yBKyCA,gCAtD8F,CLa9F,yBKyCA,2BAtD8F,CDkE1F,yCJ/DL,4CKmDC,WAlFY,CLmCb,wBK+CC,gCAtD8F,CLa9F,wBKyCA,iCAtD8F,CLa9F,wBKyCA,2BAtD8F,CLa9F,wBKyCA,iCAtD8F,CLa9F,wBKyCA,iCAtD8F,CLa9F,wBKyCA,2BAtD8F,CLa9F,wBKyCA,iCAtD8F,CLa9F,wBKyCA,iCAtD8F,CLa9F,wBKyCA,2BAtD8F,CLa9F,yBKyCA,iCAtD8F,CLa9F,yBKyCA,iCAtD8F,CLa9F,yBKyCA,4BAtD8F,CLG/F,0DKmDC,WAlFY,CLmCb,yBK+CC,gCAtD8F,CLa9F,yBKyCA,iCAtD8F,CLa9F,yBKyCA,2BAtD8F,CLa9F,yBKyCA,iCAtD8F,CLa9F,yBKyCA,iCAtD8F,CLa9F,yBKyCA,2BAtD8F,CLa9F,yBKyCA,iCAtD8F,CLa9F,yBKyCA,iCAtD8F,CLa9F,yBKyCA,2BAtD8F,CLa9F,0BKyCA,iCAtD8F,CLa9F,0BKyCA,iCAtD8F,CLa9F,0BKyCA,4BAtD8F,CLe7F,CImDG,yCJ/DL,wDKmDC,WAlFY,CLmCb,wBK+CC,gCAtD8F,CLa9F,wBKyCA,iCAtD8F,CLa9F,wBKyCA,2BAtD8F,CLa9F,wBKyCA,iCAtD8F,CLa9F,wBKyCA,iCAtD8F,CLa9F,wBKyCA,2BAtD8F,CLa9F,wBKyCA,iCAtD8F,CLa9F,wBKyCA,iCAtD8F,CLa9F,wBKyCA,2BAtD8F,CLa9F,yBKyCA,iCAtD8F,CLa9F,yBKyCA,iCAtD8F,CLa9F,yBKyCA,4BAtD8F,CLe7F,CAkTD,0BU5YI,4BAAmC,CN6InC,yCJ+PJ,0BU5YI,6BAAmC,CV8YtC,CIjQG,yCJ+PJ,0BU5YI,6BAAmC,CV8YtC,CIjQG,yCJmQF,iCUhZE,6BAAmC,CVkZpC,CIrQC,yCJmQF,gCUhZE,6BAAmC,CVkZpC,CWrbP,KACE,qBAAsB,CACvB,iBAEC,kBAAmB,CACpB,kBAGC,oCAAsC,CACvC,GAGC,eCUY,CDTZ,QAAS,CACV,cEZG,wBDSe,CCRf,eDiBc,CChBd,wBAAsB,CACtB,iBAAkB,CAClB,YDJiB,CCKlB,QCND,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","file":"main.912281b2.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@200;300;400;600;700;900&family=Quicksand&display=swap);\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n\n.grid-container{padding-right:.625rem;padding-left:.625rem;max-width:75rem;margin-left:auto;margin-right:auto}@media print, screen and (min-width: 40em){.grid-container{padding-right:.9375rem;padding-left:.9375rem}}.grid-container.fluid{padding-right:.625rem;padding-left:.625rem;max-width:100%;margin-left:auto;margin-right:auto}@media print, screen and (min-width: 40em){.grid-container.fluid{padding-right:.9375rem;padding-left:.9375rem}}.grid-container.full{padding-right:0;padding-left:0;max-width:100%;margin-left:auto;margin-right:auto}.grid-x{display:-webkit-flex;display:flex;-webkit-flex-flow:row wrap;flex-flow:row wrap}.cell{-webkit-flex:0 0 auto;flex:0 0 auto;min-height:0px;min-width:0px;width:100%}.cell.auto{-webkit-flex:1 1;flex:1 1}.cell.shrink{-webkit-flex:0 0 auto;flex:0 0 auto}.grid-x>.auto{width:auto}.grid-x>.shrink{width:auto}.grid-x>.small-shrink,.grid-x>.small-full,.grid-x>.small-1,.grid-x>.small-2,.grid-x>.small-3,.grid-x>.small-4,.grid-x>.small-5,.grid-x>.small-6,.grid-x>.small-7,.grid-x>.small-8,.grid-x>.small-9,.grid-x>.small-10,.grid-x>.small-11,.grid-x>.small-12{-webkit-flex-basis:auto;flex-basis:auto}@media print, screen and (min-width: 40em){.grid-x>.medium-shrink,.grid-x>.medium-full,.grid-x>.medium-1,.grid-x>.medium-2,.grid-x>.medium-3,.grid-x>.medium-4,.grid-x>.medium-5,.grid-x>.medium-6,.grid-x>.medium-7,.grid-x>.medium-8,.grid-x>.medium-9,.grid-x>.medium-10,.grid-x>.medium-11,.grid-x>.medium-12{-webkit-flex-basis:auto;flex-basis:auto}}@media print, screen and (min-width: 64em){.grid-x>.large-shrink,.grid-x>.large-full,.grid-x>.large-1,.grid-x>.large-2,.grid-x>.large-3,.grid-x>.large-4,.grid-x>.large-5,.grid-x>.large-6,.grid-x>.large-7,.grid-x>.large-8,.grid-x>.large-9,.grid-x>.large-10,.grid-x>.large-11,.grid-x>.large-12{-webkit-flex-basis:auto;flex-basis:auto}}.grid-x>.small-1,.grid-x>.small-2,.grid-x>.small-3,.grid-x>.small-4,.grid-x>.small-5,.grid-x>.small-6,.grid-x>.small-7,.grid-x>.small-8,.grid-x>.small-9,.grid-x>.small-10,.grid-x>.small-11,.grid-x>.small-12{-webkit-flex:0 0 auto;flex:0 0 auto}.grid-x>.small-1{width:8.33333%}.grid-x>.small-2{width:16.66667%}.grid-x>.small-3{width:25%}.grid-x>.small-4{width:33.33333%}.grid-x>.small-5{width:41.66667%}.grid-x>.small-6{width:50%}.grid-x>.small-7{width:58.33333%}.grid-x>.small-8{width:66.66667%}.grid-x>.small-9{width:75%}.grid-x>.small-10{width:83.33333%}.grid-x>.small-11{width:91.66667%}.grid-x>.small-12{width:100%}@media print, screen and (min-width: 40em){.grid-x>.medium-auto{-webkit-flex:1 1;flex:1 1;width:auto}.grid-x>.medium-shrink,.grid-x>.medium-1,.grid-x>.medium-2,.grid-x>.medium-3,.grid-x>.medium-4,.grid-x>.medium-5,.grid-x>.medium-6,.grid-x>.medium-7,.grid-x>.medium-8,.grid-x>.medium-9,.grid-x>.medium-10,.grid-x>.medium-11,.grid-x>.medium-12{-webkit-flex:0 0 auto;flex:0 0 auto}.grid-x>.medium-shrink{width:auto}.grid-x>.medium-1{width:8.33333%}.grid-x>.medium-2{width:16.66667%}.grid-x>.medium-3{width:25%}.grid-x>.medium-4{width:33.33333%}.grid-x>.medium-5{width:41.66667%}.grid-x>.medium-6{width:50%}.grid-x>.medium-7{width:58.33333%}.grid-x>.medium-8{width:66.66667%}.grid-x>.medium-9{width:75%}.grid-x>.medium-10{width:83.33333%}.grid-x>.medium-11{width:91.66667%}.grid-x>.medium-12{width:100%}}@media print, screen and (min-width: 64em){.grid-x>.large-auto{-webkit-flex:1 1;flex:1 1;width:auto}.grid-x>.large-shrink,.grid-x>.large-1,.grid-x>.large-2,.grid-x>.large-3,.grid-x>.large-4,.grid-x>.large-5,.grid-x>.large-6,.grid-x>.large-7,.grid-x>.large-8,.grid-x>.large-9,.grid-x>.large-10,.grid-x>.large-11,.grid-x>.large-12{-webkit-flex:0 0 auto;flex:0 0 auto}.grid-x>.large-shrink{width:auto}.grid-x>.large-1{width:8.33333%}.grid-x>.large-2{width:16.66667%}.grid-x>.large-3{width:25%}.grid-x>.large-4{width:33.33333%}.grid-x>.large-5{width:41.66667%}.grid-x>.large-6{width:50%}.grid-x>.large-7{width:58.33333%}.grid-x>.large-8{width:66.66667%}.grid-x>.large-9{width:75%}.grid-x>.large-10{width:83.33333%}.grid-x>.large-11{width:91.66667%}.grid-x>.large-12{width:100%}}.grid-margin-x:not(.grid-x)>.cell{width:auto}.grid-margin-y:not(.grid-y)>.cell{height:auto}.grid-margin-x{margin-left:-.625rem;margin-right:-.625rem}@media print, screen and (min-width: 40em){.grid-margin-x{margin-left:-.9375rem;margin-right:-.9375rem}}.grid-margin-x>.cell{width:calc(100% - 1.25rem);margin-left:.625rem;margin-right:.625rem}@media print, screen and (min-width: 40em){.grid-margin-x>.cell{width:calc(100% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem}}.grid-margin-x>.auto{width:auto}.grid-margin-x>.shrink{width:auto}.grid-margin-x>.small-1{width:calc(8.33333% - 1.25rem)}.grid-margin-x>.small-2{width:calc(16.66667% - 1.25rem)}.grid-margin-x>.small-3{width:calc(25% - 1.25rem)}.grid-margin-x>.small-4{width:calc(33.33333% - 1.25rem)}.grid-margin-x>.small-5{width:calc(41.66667% - 1.25rem)}.grid-margin-x>.small-6{width:calc(50% - 1.25rem)}.grid-margin-x>.small-7{width:calc(58.33333% - 1.25rem)}.grid-margin-x>.small-8{width:calc(66.66667% - 1.25rem)}.grid-margin-x>.small-9{width:calc(75% - 1.25rem)}.grid-margin-x>.small-10{width:calc(83.33333% - 1.25rem)}.grid-margin-x>.small-11{width:calc(91.66667% - 1.25rem)}.grid-margin-x>.small-12{width:calc(100% - 1.25rem)}@media print, screen and (min-width: 40em){.grid-margin-x>.auto{width:auto}.grid-margin-x>.shrink{width:auto}.grid-margin-x>.small-1{width:calc(8.33333% - 1.875rem)}.grid-margin-x>.small-2{width:calc(16.66667% - 1.875rem)}.grid-margin-x>.small-3{width:calc(25% - 1.875rem)}.grid-margin-x>.small-4{width:calc(33.33333% - 1.875rem)}.grid-margin-x>.small-5{width:calc(41.66667% - 1.875rem)}.grid-margin-x>.small-6{width:calc(50% - 1.875rem)}.grid-margin-x>.small-7{width:calc(58.33333% - 1.875rem)}.grid-margin-x>.small-8{width:calc(66.66667% - 1.875rem)}.grid-margin-x>.small-9{width:calc(75% - 1.875rem)}.grid-margin-x>.small-10{width:calc(83.33333% - 1.875rem)}.grid-margin-x>.small-11{width:calc(91.66667% - 1.875rem)}.grid-margin-x>.small-12{width:calc(100% - 1.875rem)}.grid-margin-x>.medium-auto{width:auto}.grid-margin-x>.medium-shrink{width:auto}.grid-margin-x>.medium-1{width:calc(8.33333% - 1.875rem)}.grid-margin-x>.medium-2{width:calc(16.66667% - 1.875rem)}.grid-margin-x>.medium-3{width:calc(25% - 1.875rem)}.grid-margin-x>.medium-4{width:calc(33.33333% - 1.875rem)}.grid-margin-x>.medium-5{width:calc(41.66667% - 1.875rem)}.grid-margin-x>.medium-6{width:calc(50% - 1.875rem)}.grid-margin-x>.medium-7{width:calc(58.33333% - 1.875rem)}.grid-margin-x>.medium-8{width:calc(66.66667% - 1.875rem)}.grid-margin-x>.medium-9{width:calc(75% - 1.875rem)}.grid-margin-x>.medium-10{width:calc(83.33333% - 1.875rem)}.grid-margin-x>.medium-11{width:calc(91.66667% - 1.875rem)}.grid-margin-x>.medium-12{width:calc(100% - 1.875rem)}}@media print, screen and (min-width: 64em){.grid-margin-x>.large-auto{width:auto}.grid-margin-x>.large-shrink{width:auto}.grid-margin-x>.large-1{width:calc(8.33333% - 1.875rem)}.grid-margin-x>.large-2{width:calc(16.66667% - 1.875rem)}.grid-margin-x>.large-3{width:calc(25% - 1.875rem)}.grid-margin-x>.large-4{width:calc(33.33333% - 1.875rem)}.grid-margin-x>.large-5{width:calc(41.66667% - 1.875rem)}.grid-margin-x>.large-6{width:calc(50% - 1.875rem)}.grid-margin-x>.large-7{width:calc(58.33333% - 1.875rem)}.grid-margin-x>.large-8{width:calc(66.66667% - 1.875rem)}.grid-margin-x>.large-9{width:calc(75% - 1.875rem)}.grid-margin-x>.large-10{width:calc(83.33333% - 1.875rem)}.grid-margin-x>.large-11{width:calc(91.66667% - 1.875rem)}.grid-margin-x>.large-12{width:calc(100% - 1.875rem)}}.grid-padding-x .grid-padding-x{margin-right:-.625rem;margin-left:-.625rem}@media print, screen and (min-width: 40em){.grid-padding-x .grid-padding-x{margin-right:-.9375rem;margin-left:-.9375rem}}.grid-container:not(.full)>.grid-padding-x{margin-right:-.625rem;margin-left:-.625rem}@media print, screen and (min-width: 40em){.grid-container:not(.full)>.grid-padding-x{margin-right:-.9375rem;margin-left:-.9375rem}}.grid-padding-x>.cell{padding-right:.625rem;padding-left:.625rem}@media print, screen and (min-width: 40em){.grid-padding-x>.cell{padding-right:.9375rem;padding-left:.9375rem}}.small-up-1>.cell{width:100%}.small-up-2>.cell{width:50%}.small-up-3>.cell{width:33.33333%}.small-up-4>.cell{width:25%}.small-up-5>.cell{width:20%}.small-up-6>.cell{width:16.66667%}.small-up-7>.cell{width:14.28571%}.small-up-8>.cell{width:12.5%}@media print, screen and (min-width: 40em){.medium-up-1>.cell{width:100%}.medium-up-2>.cell{width:50%}.medium-up-3>.cell{width:33.33333%}.medium-up-4>.cell{width:25%}.medium-up-5>.cell{width:20%}.medium-up-6>.cell{width:16.66667%}.medium-up-7>.cell{width:14.28571%}.medium-up-8>.cell{width:12.5%}}@media print, screen and (min-width: 64em){.large-up-1>.cell{width:100%}.large-up-2>.cell{width:50%}.large-up-3>.cell{width:33.33333%}.large-up-4>.cell{width:25%}.large-up-5>.cell{width:20%}.large-up-6>.cell{width:16.66667%}.large-up-7>.cell{width:14.28571%}.large-up-8>.cell{width:12.5%}}.grid-margin-x.small-up-1>.cell{width:calc(100% - 1.25rem)}.grid-margin-x.small-up-2>.cell{width:calc(50% - 1.25rem)}.grid-margin-x.small-up-3>.cell{width:calc(33.33333% - 1.25rem)}.grid-margin-x.small-up-4>.cell{width:calc(25% - 1.25rem)}.grid-margin-x.small-up-5>.cell{width:calc(20% - 1.25rem)}.grid-margin-x.small-up-6>.cell{width:calc(16.66667% - 1.25rem)}.grid-margin-x.small-up-7>.cell{width:calc(14.28571% - 1.25rem)}.grid-margin-x.small-up-8>.cell{width:calc(12.5% - 1.25rem)}@media print, screen and (min-width: 40em){.grid-margin-x.small-up-1>.cell{width:calc(100% - 1.875rem)}.grid-margin-x.small-up-2>.cell{width:calc(50% - 1.875rem)}.grid-margin-x.small-up-3>.cell{width:calc(33.33333% - 1.875rem)}.grid-margin-x.small-up-4>.cell{width:calc(25% - 1.875rem)}.grid-margin-x.small-up-5>.cell{width:calc(20% - 1.875rem)}.grid-margin-x.small-up-6>.cell{width:calc(16.66667% - 1.875rem)}.grid-margin-x.small-up-7>.cell{width:calc(14.28571% - 1.875rem)}.grid-margin-x.small-up-8>.cell{width:calc(12.5% - 1.875rem)}.grid-margin-x.medium-up-1>.cell{width:calc(100% - 1.875rem)}.grid-margin-x.medium-up-2>.cell{width:calc(50% - 1.875rem)}.grid-margin-x.medium-up-3>.cell{width:calc(33.33333% - 1.875rem)}.grid-margin-x.medium-up-4>.cell{width:calc(25% - 1.875rem)}.grid-margin-x.medium-up-5>.cell{width:calc(20% - 1.875rem)}.grid-margin-x.medium-up-6>.cell{width:calc(16.66667% - 1.875rem)}.grid-margin-x.medium-up-7>.cell{width:calc(14.28571% - 1.875rem)}.grid-margin-x.medium-up-8>.cell{width:calc(12.5% - 1.875rem)}}@media print, screen and (min-width: 64em){.grid-margin-x.large-up-1>.cell{width:calc(100% - 1.875rem)}.grid-margin-x.large-up-2>.cell{width:calc(50% - 1.875rem)}.grid-margin-x.large-up-3>.cell{width:calc(33.33333% - 1.875rem)}.grid-margin-x.large-up-4>.cell{width:calc(25% - 1.875rem)}.grid-margin-x.large-up-5>.cell{width:calc(20% - 1.875rem)}.grid-margin-x.large-up-6>.cell{width:calc(16.66667% - 1.875rem)}.grid-margin-x.large-up-7>.cell{width:calc(14.28571% - 1.875rem)}.grid-margin-x.large-up-8>.cell{width:calc(12.5% - 1.875rem)}}.small-margin-collapse{margin-right:0;margin-left:0}.small-margin-collapse>.cell{margin-right:0;margin-left:0}.small-margin-collapse>.small-1{width:8.33333%}.small-margin-collapse>.small-2{width:16.66667%}.small-margin-collapse>.small-3{width:25%}.small-margin-collapse>.small-4{width:33.33333%}.small-margin-collapse>.small-5{width:41.66667%}.small-margin-collapse>.small-6{width:50%}.small-margin-collapse>.small-7{width:58.33333%}.small-margin-collapse>.small-8{width:66.66667%}.small-margin-collapse>.small-9{width:75%}.small-margin-collapse>.small-10{width:83.33333%}.small-margin-collapse>.small-11{width:91.66667%}.small-margin-collapse>.small-12{width:100%}@media print, screen and (min-width: 40em){.small-margin-collapse>.medium-1{width:8.33333%}.small-margin-collapse>.medium-2{width:16.66667%}.small-margin-collapse>.medium-3{width:25%}.small-margin-collapse>.medium-4{width:33.33333%}.small-margin-collapse>.medium-5{width:41.66667%}.small-margin-collapse>.medium-6{width:50%}.small-margin-collapse>.medium-7{width:58.33333%}.small-margin-collapse>.medium-8{width:66.66667%}.small-margin-collapse>.medium-9{width:75%}.small-margin-collapse>.medium-10{width:83.33333%}.small-margin-collapse>.medium-11{width:91.66667%}.small-margin-collapse>.medium-12{width:100%}}@media print, screen and (min-width: 64em){.small-margin-collapse>.large-1{width:8.33333%}.small-margin-collapse>.large-2{width:16.66667%}.small-margin-collapse>.large-3{width:25%}.small-margin-collapse>.large-4{width:33.33333%}.small-margin-collapse>.large-5{width:41.66667%}.small-margin-collapse>.large-6{width:50%}.small-margin-collapse>.large-7{width:58.33333%}.small-margin-collapse>.large-8{width:66.66667%}.small-margin-collapse>.large-9{width:75%}.small-margin-collapse>.large-10{width:83.33333%}.small-margin-collapse>.large-11{width:91.66667%}.small-margin-collapse>.large-12{width:100%}}.small-padding-collapse{margin-right:0;margin-left:0}.small-padding-collapse>.cell{padding-right:0;padding-left:0}@media print, screen and (min-width: 40em){.medium-margin-collapse{margin-right:0;margin-left:0}.medium-margin-collapse>.cell{margin-right:0;margin-left:0}}@media print, screen and (min-width: 40em){.medium-margin-collapse>.small-1{width:8.33333%}.medium-margin-collapse>.small-2{width:16.66667%}.medium-margin-collapse>.small-3{width:25%}.medium-margin-collapse>.small-4{width:33.33333%}.medium-margin-collapse>.small-5{width:41.66667%}.medium-margin-collapse>.small-6{width:50%}.medium-margin-collapse>.small-7{width:58.33333%}.medium-margin-collapse>.small-8{width:66.66667%}.medium-margin-collapse>.small-9{width:75%}.medium-margin-collapse>.small-10{width:83.33333%}.medium-margin-collapse>.small-11{width:91.66667%}.medium-margin-collapse>.small-12{width:100%}}@media print, screen and (min-width: 40em){.medium-margin-collapse>.medium-1{width:8.33333%}.medium-margin-collapse>.medium-2{width:16.66667%}.medium-margin-collapse>.medium-3{width:25%}.medium-margin-collapse>.medium-4{width:33.33333%}.medium-margin-collapse>.medium-5{width:41.66667%}.medium-margin-collapse>.medium-6{width:50%}.medium-margin-collapse>.medium-7{width:58.33333%}.medium-margin-collapse>.medium-8{width:66.66667%}.medium-margin-collapse>.medium-9{width:75%}.medium-margin-collapse>.medium-10{width:83.33333%}.medium-margin-collapse>.medium-11{width:91.66667%}.medium-margin-collapse>.medium-12{width:100%}}@media print, screen and (min-width: 64em){.medium-margin-collapse>.large-1{width:8.33333%}.medium-margin-collapse>.large-2{width:16.66667%}.medium-margin-collapse>.large-3{width:25%}.medium-margin-collapse>.large-4{width:33.33333%}.medium-margin-collapse>.large-5{width:41.66667%}.medium-margin-collapse>.large-6{width:50%}.medium-margin-collapse>.large-7{width:58.33333%}.medium-margin-collapse>.large-8{width:66.66667%}.medium-margin-collapse>.large-9{width:75%}.medium-margin-collapse>.large-10{width:83.33333%}.medium-margin-collapse>.large-11{width:91.66667%}.medium-margin-collapse>.large-12{width:100%}}@media print, screen and (min-width: 40em){.medium-padding-collapse{margin-right:0;margin-left:0}.medium-padding-collapse>.cell{padding-right:0;padding-left:0}}@media print, screen and (min-width: 64em){.large-margin-collapse{margin-right:0;margin-left:0}.large-margin-collapse>.cell{margin-right:0;margin-left:0}}@media print, screen and (min-width: 64em){.large-margin-collapse>.small-1{width:8.33333%}.large-margin-collapse>.small-2{width:16.66667%}.large-margin-collapse>.small-3{width:25%}.large-margin-collapse>.small-4{width:33.33333%}.large-margin-collapse>.small-5{width:41.66667%}.large-margin-collapse>.small-6{width:50%}.large-margin-collapse>.small-7{width:58.33333%}.large-margin-collapse>.small-8{width:66.66667%}.large-margin-collapse>.small-9{width:75%}.large-margin-collapse>.small-10{width:83.33333%}.large-margin-collapse>.small-11{width:91.66667%}.large-margin-collapse>.small-12{width:100%}}@media print, screen and (min-width: 64em){.large-margin-collapse>.medium-1{width:8.33333%}.large-margin-collapse>.medium-2{width:16.66667%}.large-margin-collapse>.medium-3{width:25%}.large-margin-collapse>.medium-4{width:33.33333%}.large-margin-collapse>.medium-5{width:41.66667%}.large-margin-collapse>.medium-6{width:50%}.large-margin-collapse>.medium-7{width:58.33333%}.large-margin-collapse>.medium-8{width:66.66667%}.large-margin-collapse>.medium-9{width:75%}.large-margin-collapse>.medium-10{width:83.33333%}.large-margin-collapse>.medium-11{width:91.66667%}.large-margin-collapse>.medium-12{width:100%}}@media print, screen and (min-width: 64em){.large-margin-collapse>.large-1{width:8.33333%}.large-margin-collapse>.large-2{width:16.66667%}.large-margin-collapse>.large-3{width:25%}.large-margin-collapse>.large-4{width:33.33333%}.large-margin-collapse>.large-5{width:41.66667%}.large-margin-collapse>.large-6{width:50%}.large-margin-collapse>.large-7{width:58.33333%}.large-margin-collapse>.large-8{width:66.66667%}.large-margin-collapse>.large-9{width:75%}.large-margin-collapse>.large-10{width:83.33333%}.large-margin-collapse>.large-11{width:91.66667%}.large-margin-collapse>.large-12{width:100%}}@media print, screen and (min-width: 64em){.large-padding-collapse{margin-right:0;margin-left:0}.large-padding-collapse>.cell{padding-right:0;padding-left:0}}.small-offset-0{margin-left:0%}.grid-margin-x>.small-offset-0{margin-left:calc(0% + .625rem)}.small-offset-1{margin-left:8.33333%}.grid-margin-x>.small-offset-1{margin-left:calc(8.33333% + .625rem)}.small-offset-2{margin-left:16.66667%}.grid-margin-x>.small-offset-2{margin-left:calc(16.66667% + .625rem)}.small-offset-3{margin-left:25%}.grid-margin-x>.small-offset-3{margin-left:calc(25% + .625rem)}.small-offset-4{margin-left:33.33333%}.grid-margin-x>.small-offset-4{margin-left:calc(33.33333% + .625rem)}.small-offset-5{margin-left:41.66667%}.grid-margin-x>.small-offset-5{margin-left:calc(41.66667% + .625rem)}.small-offset-6{margin-left:50%}.grid-margin-x>.small-offset-6{margin-left:calc(50% + .625rem)}.small-offset-7{margin-left:58.33333%}.grid-margin-x>.small-offset-7{margin-left:calc(58.33333% + .625rem)}.small-offset-8{margin-left:66.66667%}.grid-margin-x>.small-offset-8{margin-left:calc(66.66667% + .625rem)}.small-offset-9{margin-left:75%}.grid-margin-x>.small-offset-9{margin-left:calc(75% + .625rem)}.small-offset-10{margin-left:83.33333%}.grid-margin-x>.small-offset-10{margin-left:calc(83.33333% + .625rem)}.small-offset-11{margin-left:91.66667%}.grid-margin-x>.small-offset-11{margin-left:calc(91.66667% + .625rem)}@media print, screen and (min-width: 40em){.medium-offset-0{margin-left:0%}.grid-margin-x>.medium-offset-0{margin-left:calc(0% + .9375rem)}.medium-offset-1{margin-left:8.33333%}.grid-margin-x>.medium-offset-1{margin-left:calc(8.33333% + .9375rem)}.medium-offset-2{margin-left:16.66667%}.grid-margin-x>.medium-offset-2{margin-left:calc(16.66667% + .9375rem)}.medium-offset-3{margin-left:25%}.grid-margin-x>.medium-offset-3{margin-left:calc(25% + .9375rem)}.medium-offset-4{margin-left:33.33333%}.grid-margin-x>.medium-offset-4{margin-left:calc(33.33333% + .9375rem)}.medium-offset-5{margin-left:41.66667%}.grid-margin-x>.medium-offset-5{margin-left:calc(41.66667% + .9375rem)}.medium-offset-6{margin-left:50%}.grid-margin-x>.medium-offset-6{margin-left:calc(50% + .9375rem)}.medium-offset-7{margin-left:58.33333%}.grid-margin-x>.medium-offset-7{margin-left:calc(58.33333% + .9375rem)}.medium-offset-8{margin-left:66.66667%}.grid-margin-x>.medium-offset-8{margin-left:calc(66.66667% + .9375rem)}.medium-offset-9{margin-left:75%}.grid-margin-x>.medium-offset-9{margin-left:calc(75% + .9375rem)}.medium-offset-10{margin-left:83.33333%}.grid-margin-x>.medium-offset-10{margin-left:calc(83.33333% + .9375rem)}.medium-offset-11{margin-left:91.66667%}.grid-margin-x>.medium-offset-11{margin-left:calc(91.66667% + .9375rem)}}@media print, screen and (min-width: 64em){.large-offset-0{margin-left:0%}.grid-margin-x>.large-offset-0{margin-left:calc(0% + .9375rem)}.large-offset-1{margin-left:8.33333%}.grid-margin-x>.large-offset-1{margin-left:calc(8.33333% + .9375rem)}.large-offset-2{margin-left:16.66667%}.grid-margin-x>.large-offset-2{margin-left:calc(16.66667% + .9375rem)}.large-offset-3{margin-left:25%}.grid-margin-x>.large-offset-3{margin-left:calc(25% + .9375rem)}.large-offset-4{margin-left:33.33333%}.grid-margin-x>.large-offset-4{margin-left:calc(33.33333% + .9375rem)}.large-offset-5{margin-left:41.66667%}.grid-margin-x>.large-offset-5{margin-left:calc(41.66667% + .9375rem)}.large-offset-6{margin-left:50%}.grid-margin-x>.large-offset-6{margin-left:calc(50% + .9375rem)}.large-offset-7{margin-left:58.33333%}.grid-margin-x>.large-offset-7{margin-left:calc(58.33333% + .9375rem)}.large-offset-8{margin-left:66.66667%}.grid-margin-x>.large-offset-8{margin-left:calc(66.66667% + .9375rem)}.large-offset-9{margin-left:75%}.grid-margin-x>.large-offset-9{margin-left:calc(75% + .9375rem)}.large-offset-10{margin-left:83.33333%}.grid-margin-x>.large-offset-10{margin-left:calc(83.33333% + .9375rem)}.large-offset-11{margin-left:91.66667%}.grid-margin-x>.large-offset-11{margin-left:calc(91.66667% + .9375rem)}}.grid-y{display:-webkit-flex;display:flex;-webkit-flex-flow:column nowrap;flex-flow:column nowrap}.grid-y>.cell{height:auto;max-height:none}.grid-y>.auto{height:auto}.grid-y>.shrink{height:auto}.grid-y>.small-shrink,.grid-y>.small-full,.grid-y>.small-1,.grid-y>.small-2,.grid-y>.small-3,.grid-y>.small-4,.grid-y>.small-5,.grid-y>.small-6,.grid-y>.small-7,.grid-y>.small-8,.grid-y>.small-9,.grid-y>.small-10,.grid-y>.small-11,.grid-y>.small-12{-webkit-flex-basis:auto;flex-basis:auto}@media print, screen and (min-width: 40em){.grid-y>.medium-shrink,.grid-y>.medium-full,.grid-y>.medium-1,.grid-y>.medium-2,.grid-y>.medium-3,.grid-y>.medium-4,.grid-y>.medium-5,.grid-y>.medium-6,.grid-y>.medium-7,.grid-y>.medium-8,.grid-y>.medium-9,.grid-y>.medium-10,.grid-y>.medium-11,.grid-y>.medium-12{-webkit-flex-basis:auto;flex-basis:auto}}@media print, screen and (min-width: 64em){.grid-y>.large-shrink,.grid-y>.large-full,.grid-y>.large-1,.grid-y>.large-2,.grid-y>.large-3,.grid-y>.large-4,.grid-y>.large-5,.grid-y>.large-6,.grid-y>.large-7,.grid-y>.large-8,.grid-y>.large-9,.grid-y>.large-10,.grid-y>.large-11,.grid-y>.large-12{-webkit-flex-basis:auto;flex-basis:auto}}.grid-y>.small-1,.grid-y>.small-2,.grid-y>.small-3,.grid-y>.small-4,.grid-y>.small-5,.grid-y>.small-6,.grid-y>.small-7,.grid-y>.small-8,.grid-y>.small-9,.grid-y>.small-10,.grid-y>.small-11,.grid-y>.small-12{-webkit-flex:0 0 auto;flex:0 0 auto}.grid-y>.small-1{height:8.33333%}.grid-y>.small-2{height:16.66667%}.grid-y>.small-3{height:25%}.grid-y>.small-4{height:33.33333%}.grid-y>.small-5{height:41.66667%}.grid-y>.small-6{height:50%}.grid-y>.small-7{height:58.33333%}.grid-y>.small-8{height:66.66667%}.grid-y>.small-9{height:75%}.grid-y>.small-10{height:83.33333%}.grid-y>.small-11{height:91.66667%}.grid-y>.small-12{height:100%}@media print, screen and (min-width: 40em){.grid-y>.medium-auto{-webkit-flex:1 1;flex:1 1;height:auto}.grid-y>.medium-shrink,.grid-y>.medium-1,.grid-y>.medium-2,.grid-y>.medium-3,.grid-y>.medium-4,.grid-y>.medium-5,.grid-y>.medium-6,.grid-y>.medium-7,.grid-y>.medium-8,.grid-y>.medium-9,.grid-y>.medium-10,.grid-y>.medium-11,.grid-y>.medium-12{-webkit-flex:0 0 auto;flex:0 0 auto}.grid-y>.medium-shrink{height:auto}.grid-y>.medium-1{height:8.33333%}.grid-y>.medium-2{height:16.66667%}.grid-y>.medium-3{height:25%}.grid-y>.medium-4{height:33.33333%}.grid-y>.medium-5{height:41.66667%}.grid-y>.medium-6{height:50%}.grid-y>.medium-7{height:58.33333%}.grid-y>.medium-8{height:66.66667%}.grid-y>.medium-9{height:75%}.grid-y>.medium-10{height:83.33333%}.grid-y>.medium-11{height:91.66667%}.grid-y>.medium-12{height:100%}}@media print, screen and (min-width: 64em){.grid-y>.large-auto{-webkit-flex:1 1;flex:1 1;height:auto}.grid-y>.large-shrink,.grid-y>.large-1,.grid-y>.large-2,.grid-y>.large-3,.grid-y>.large-4,.grid-y>.large-5,.grid-y>.large-6,.grid-y>.large-7,.grid-y>.large-8,.grid-y>.large-9,.grid-y>.large-10,.grid-y>.large-11,.grid-y>.large-12{-webkit-flex:0 0 auto;flex:0 0 auto}.grid-y>.large-shrink{height:auto}.grid-y>.large-1{height:8.33333%}.grid-y>.large-2{height:16.66667%}.grid-y>.large-3{height:25%}.grid-y>.large-4{height:33.33333%}.grid-y>.large-5{height:41.66667%}.grid-y>.large-6{height:50%}.grid-y>.large-7{height:58.33333%}.grid-y>.large-8{height:66.66667%}.grid-y>.large-9{height:75%}.grid-y>.large-10{height:83.33333%}.grid-y>.large-11{height:91.66667%}.grid-y>.large-12{height:100%}}.grid-padding-y .grid-padding-y{margin-top:-.625rem;margin-bottom:-.625rem}@media print, screen and (min-width: 40em){.grid-padding-y .grid-padding-y{margin-top:-.9375rem;margin-bottom:-.9375rem}}.grid-padding-y>.cell{padding-top:.625rem;padding-bottom:.625rem}@media print, screen and (min-width: 40em){.grid-padding-y>.cell{padding-top:.9375rem;padding-bottom:.9375rem}}.grid-margin-y{margin-top:-.625rem;margin-bottom:-.625rem}@media print, screen and (min-width: 40em){.grid-margin-y{margin-top:-.9375rem;margin-bottom:-.9375rem}}.grid-margin-y>.cell{height:calc(100% - 1.25rem);margin-top:.625rem;margin-bottom:.625rem}@media print, screen and (min-width: 40em){.grid-margin-y>.cell{height:calc(100% - 1.875rem);margin-top:.9375rem;margin-bottom:.9375rem}}.grid-margin-y>.auto{height:auto}.grid-margin-y>.shrink{height:auto}.grid-margin-y>.small-1{height:calc(8.33333% - 1.25rem)}.grid-margin-y>.small-2{height:calc(16.66667% - 1.25rem)}.grid-margin-y>.small-3{height:calc(25% - 1.25rem)}.grid-margin-y>.small-4{height:calc(33.33333% - 1.25rem)}.grid-margin-y>.small-5{height:calc(41.66667% - 1.25rem)}.grid-margin-y>.small-6{height:calc(50% - 1.25rem)}.grid-margin-y>.small-7{height:calc(58.33333% - 1.25rem)}.grid-margin-y>.small-8{height:calc(66.66667% - 1.25rem)}.grid-margin-y>.small-9{height:calc(75% - 1.25rem)}.grid-margin-y>.small-10{height:calc(83.33333% - 1.25rem)}.grid-margin-y>.small-11{height:calc(91.66667% - 1.25rem)}.grid-margin-y>.small-12{height:calc(100% - 1.25rem)}@media print, screen and (min-width: 40em){.grid-margin-y>.auto{height:auto}.grid-margin-y>.shrink{height:auto}.grid-margin-y>.small-1{height:calc(8.33333% - 1.875rem)}.grid-margin-y>.small-2{height:calc(16.66667% - 1.875rem)}.grid-margin-y>.small-3{height:calc(25% - 1.875rem)}.grid-margin-y>.small-4{height:calc(33.33333% - 1.875rem)}.grid-margin-y>.small-5{height:calc(41.66667% - 1.875rem)}.grid-margin-y>.small-6{height:calc(50% - 1.875rem)}.grid-margin-y>.small-7{height:calc(58.33333% - 1.875rem)}.grid-margin-y>.small-8{height:calc(66.66667% - 1.875rem)}.grid-margin-y>.small-9{height:calc(75% - 1.875rem)}.grid-margin-y>.small-10{height:calc(83.33333% - 1.875rem)}.grid-margin-y>.small-11{height:calc(91.66667% - 1.875rem)}.grid-margin-y>.small-12{height:calc(100% - 1.875rem)}.grid-margin-y>.medium-auto{height:auto}.grid-margin-y>.medium-shrink{height:auto}.grid-margin-y>.medium-1{height:calc(8.33333% - 1.875rem)}.grid-margin-y>.medium-2{height:calc(16.66667% - 1.875rem)}.grid-margin-y>.medium-3{height:calc(25% - 1.875rem)}.grid-margin-y>.medium-4{height:calc(33.33333% - 1.875rem)}.grid-margin-y>.medium-5{height:calc(41.66667% - 1.875rem)}.grid-margin-y>.medium-6{height:calc(50% - 1.875rem)}.grid-margin-y>.medium-7{height:calc(58.33333% - 1.875rem)}.grid-margin-y>.medium-8{height:calc(66.66667% - 1.875rem)}.grid-margin-y>.medium-9{height:calc(75% - 1.875rem)}.grid-margin-y>.medium-10{height:calc(83.33333% - 1.875rem)}.grid-margin-y>.medium-11{height:calc(91.66667% - 1.875rem)}.grid-margin-y>.medium-12{height:calc(100% - 1.875rem)}}@media print, screen and (min-width: 64em){.grid-margin-y>.large-auto{height:auto}.grid-margin-y>.large-shrink{height:auto}.grid-margin-y>.large-1{height:calc(8.33333% - 1.875rem)}.grid-margin-y>.large-2{height:calc(16.66667% - 1.875rem)}.grid-margin-y>.large-3{height:calc(25% - 1.875rem)}.grid-margin-y>.large-4{height:calc(33.33333% - 1.875rem)}.grid-margin-y>.large-5{height:calc(41.66667% - 1.875rem)}.grid-margin-y>.large-6{height:calc(50% - 1.875rem)}.grid-margin-y>.large-7{height:calc(58.33333% - 1.875rem)}.grid-margin-y>.large-8{height:calc(66.66667% - 1.875rem)}.grid-margin-y>.large-9{height:calc(75% - 1.875rem)}.grid-margin-y>.large-10{height:calc(83.33333% - 1.875rem)}.grid-margin-y>.large-11{height:calc(91.66667% - 1.875rem)}.grid-margin-y>.large-12{height:calc(100% - 1.875rem)}}.grid-frame{overflow:hidden;position:relative;-webkit-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:stretch;align-items:stretch;width:100vw}.cell .grid-frame{width:100%}.cell-block{overflow-x:auto;max-width:100%;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.cell-block-y{overflow-y:auto;max-height:100%;min-height:100%;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.cell-block-container{display:-webkit-flex;display:flex;-webkit-flex-direction:column;flex-direction:column;max-height:100%}.cell-block-container>.grid-x{max-height:100%;-webkit-flex-wrap:nowrap;flex-wrap:nowrap}@media print, screen and (min-width: 40em){.medium-grid-frame{overflow:hidden;position:relative;-webkit-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:stretch;align-items:stretch;width:100vw}.cell .medium-grid-frame{width:100%}.medium-cell-block{overflow-x:auto;max-width:100%;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.medium-cell-block-container{display:-webkit-flex;display:flex;-webkit-flex-direction:column;flex-direction:column;max-height:100%}.medium-cell-block-container>.grid-x{max-height:100%;-webkit-flex-wrap:nowrap;flex-wrap:nowrap}.medium-cell-block-y{overflow-y:auto;max-height:100%;min-height:100%;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}}@media print, screen and (min-width: 64em){.large-grid-frame{overflow:hidden;position:relative;-webkit-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:stretch;align-items:stretch;width:100vw}.cell .large-grid-frame{width:100%}.large-cell-block{overflow-x:auto;max-width:100%;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.large-cell-block-container{display:-webkit-flex;display:flex;-webkit-flex-direction:column;flex-direction:column;max-height:100%}.large-cell-block-container>.grid-x{max-height:100%;-webkit-flex-wrap:nowrap;flex-wrap:nowrap}.large-cell-block-y{overflow-y:auto;max-height:100%;min-height:100%;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}}.grid-y.grid-frame{width:auto;overflow:hidden;position:relative;-webkit-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:stretch;align-items:stretch;height:100vh}@media print, screen and (min-width: 40em){.grid-y.medium-grid-frame{width:auto;overflow:hidden;position:relative;-webkit-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:stretch;align-items:stretch;height:100vh}}@media print, screen and (min-width: 64em){.grid-y.large-grid-frame{width:auto;overflow:hidden;position:relative;-webkit-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:stretch;align-items:stretch;height:100vh}}.cell .grid-y.grid-frame{height:100%}@media print, screen and (min-width: 40em){.cell .grid-y.medium-grid-frame{height:100%}}@media print, screen and (min-width: 64em){.cell .grid-y.large-grid-frame{height:100%}}.grid-margin-y{margin-top:-.625rem;margin-bottom:-.625rem}@media print, screen and (min-width: 40em){.grid-margin-y{margin-top:-.9375rem;margin-bottom:-.9375rem}}.grid-margin-y>.cell{height:calc(100% - 1.25rem);margin-top:.625rem;margin-bottom:.625rem}@media print, screen and (min-width: 40em){.grid-margin-y>.cell{height:calc(100% - 1.875rem);margin-top:.9375rem;margin-bottom:.9375rem}}.grid-margin-y>.auto{height:auto}.grid-margin-y>.shrink{height:auto}.grid-margin-y>.small-1{height:calc(8.33333% - 1.25rem)}.grid-margin-y>.small-2{height:calc(16.66667% - 1.25rem)}.grid-margin-y>.small-3{height:calc(25% - 1.25rem)}.grid-margin-y>.small-4{height:calc(33.33333% - 1.25rem)}.grid-margin-y>.small-5{height:calc(41.66667% - 1.25rem)}.grid-margin-y>.small-6{height:calc(50% - 1.25rem)}.grid-margin-y>.small-7{height:calc(58.33333% - 1.25rem)}.grid-margin-y>.small-8{height:calc(66.66667% - 1.25rem)}.grid-margin-y>.small-9{height:calc(75% - 1.25rem)}.grid-margin-y>.small-10{height:calc(83.33333% - 1.25rem)}.grid-margin-y>.small-11{height:calc(91.66667% - 1.25rem)}.grid-margin-y>.small-12{height:calc(100% - 1.25rem)}@media print, screen and (min-width: 40em){.grid-margin-y>.auto{height:auto}.grid-margin-y>.shrink{height:auto}.grid-margin-y>.small-1{height:calc(8.33333% - 1.875rem)}.grid-margin-y>.small-2{height:calc(16.66667% - 1.875rem)}.grid-margin-y>.small-3{height:calc(25% - 1.875rem)}.grid-margin-y>.small-4{height:calc(33.33333% - 1.875rem)}.grid-margin-y>.small-5{height:calc(41.66667% - 1.875rem)}.grid-margin-y>.small-6{height:calc(50% - 1.875rem)}.grid-margin-y>.small-7{height:calc(58.33333% - 1.875rem)}.grid-margin-y>.small-8{height:calc(66.66667% - 1.875rem)}.grid-margin-y>.small-9{height:calc(75% - 1.875rem)}.grid-margin-y>.small-10{height:calc(83.33333% - 1.875rem)}.grid-margin-y>.small-11{height:calc(91.66667% - 1.875rem)}.grid-margin-y>.small-12{height:calc(100% - 1.875rem)}.grid-margin-y>.medium-auto{height:auto}.grid-margin-y>.medium-shrink{height:auto}.grid-margin-y>.medium-1{height:calc(8.33333% - 1.875rem)}.grid-margin-y>.medium-2{height:calc(16.66667% - 1.875rem)}.grid-margin-y>.medium-3{height:calc(25% - 1.875rem)}.grid-margin-y>.medium-4{height:calc(33.33333% - 1.875rem)}.grid-margin-y>.medium-5{height:calc(41.66667% - 1.875rem)}.grid-margin-y>.medium-6{height:calc(50% - 1.875rem)}.grid-margin-y>.medium-7{height:calc(58.33333% - 1.875rem)}.grid-margin-y>.medium-8{height:calc(66.66667% - 1.875rem)}.grid-margin-y>.medium-9{height:calc(75% - 1.875rem)}.grid-margin-y>.medium-10{height:calc(83.33333% - 1.875rem)}.grid-margin-y>.medium-11{height:calc(91.66667% - 1.875rem)}.grid-margin-y>.medium-12{height:calc(100% - 1.875rem)}}@media print, screen and (min-width: 64em){.grid-margin-y>.large-auto{height:auto}.grid-margin-y>.large-shrink{height:auto}.grid-margin-y>.large-1{height:calc(8.33333% - 1.875rem)}.grid-margin-y>.large-2{height:calc(16.66667% - 1.875rem)}.grid-margin-y>.large-3{height:calc(25% - 1.875rem)}.grid-margin-y>.large-4{height:calc(33.33333% - 1.875rem)}.grid-margin-y>.large-5{height:calc(41.66667% - 1.875rem)}.grid-margin-y>.large-6{height:calc(50% - 1.875rem)}.grid-margin-y>.large-7{height:calc(58.33333% - 1.875rem)}.grid-margin-y>.large-8{height:calc(66.66667% - 1.875rem)}.grid-margin-y>.large-9{height:calc(75% - 1.875rem)}.grid-margin-y>.large-10{height:calc(83.33333% - 1.875rem)}.grid-margin-y>.large-11{height:calc(91.66667% - 1.875rem)}.grid-margin-y>.large-12{height:calc(100% - 1.875rem)}}.grid-frame.grid-margin-y{height:calc(100vh + 1.25rem)}@media print, screen and (min-width: 40em){.grid-frame.grid-margin-y{height:calc(100vh + 1.875rem)}}@media print, screen and (min-width: 64em){.grid-frame.grid-margin-y{height:calc(100vh + 1.875rem)}}@media print, screen and (min-width: 40em){.grid-margin-y.medium-grid-frame{height:calc(100vh + 1.875rem)}}@media print, screen and (min-width: 64em){.grid-margin-y.large-grid-frame{height:calc(100vh + 1.875rem)}}html{box-sizing:border-box}*,*:before,*:after{box-sizing:inherit}body,input,button{font-family:'Nunito Sans', sans-serif}h1{font-weight:900;margin:0}.alert--error{background-color:#F7CACA;font-weight:600;border:2px #BD1E1E solid;border-radius:6px;padding:24px}.button{background-color:#fff;border:#004777 2px solid;color:#004777;font-weight:700;font-size:16px;padding:6px 12px;border-radius:6px;text-decoration:none;cursor:pointer}.button:hover{color:#fff;background-color:#004777}.button--blue{background-color:#0093F5;border-color:#0093F5;color:#fff}.button--midnight-blue{background-color:#004777;border-color:#004777;color:#fff}.button--midnight-blue:hover{background-color:#003152;border-color:#003152}.button--red{background-color:#BD1E1E;border-color:#BD1E1E;color:#fff}.button--understated{font-size:14px;padding:3px 6px}.footer{color:#fff;padding:24px;display:-webkit-flex;display:flex;-webkit-flex-direction:column;flex-direction:column}@media print, screen and (min-width: 40em){.footer{-webkit-flex-direction:row;flex-direction:row}.footer .footer__section{margin-right:48px;margin-bottom:0}}.footer__section{margin-bottom:12px}.footer__header{font-weight:900;margin-bottom:3px}.footer__detail{font-weight:600;font-size:12px;margin-bottom:3px}.footer__detail--link{color:#fff;display:block}.footer__detail--link:hover{text-decoration:none}.loading{width:100%;display:-webkit-flex;display:flex;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;align-items:center}@-webkit-keyframes loading--ripple{0%{top:36px;left:36px;width:0;height:0;opacity:1}100%{top:0px;left:0px;width:72px;height:72px;opacity:0}}@keyframes loading--ripple{0%{top:36px;left:36px;width:0;height:0;opacity:1}100%{top:0px;left:0px;width:72px;height:72px;opacity:0}}.loading--ellipsis{display:inline-block;position:relative;width:80px;height:20px}.loading--ellipsis div{position:absolute;top:3px;width:13px;height:13px;border-radius:50%;background:#C2C2C2;-webkit-animation-timing-function:cubic-bezier(0, 1, 1, 0);animation-timing-function:cubic-bezier(0, 1, 1, 0)}.loading--ellipsis div:nth-child(1){left:8px;-webkit-animation:loading--ellipsis1 0.6s infinite;animation:loading--ellipsis1 0.6s infinite}.loading--ellipsis div:nth-child(2){left:8px;-webkit-animation:loading--ellipsis2 0.6s infinite;animation:loading--ellipsis2 0.6s infinite}.loading--ellipsis div:nth-child(3){left:32px;-webkit-animation:loading--ellipsis2 0.6s infinite;animation:loading--ellipsis2 0.6s infinite}.loading--ellipsis div:nth-child(4){left:56px;-webkit-animation:loading--ellipsis3 0.6s infinite;animation:loading--ellipsis3 0.6s infinite}@-webkit-keyframes loading--ellipsis1{0%{-webkit-transform:scale(0);transform:scale(0)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes loading--ellipsis1{0%{-webkit-transform:scale(0);transform:scale(0)}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes loading--ellipsis3{0%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0);transform:scale(0)}}@keyframes loading--ellipsis3{0%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0);transform:scale(0)}}@-webkit-keyframes loading--ellipsis2{0%{-webkit-transform:translate(0, 0);transform:translate(0, 0)}100%{-webkit-transform:translate(24px, 0);transform:translate(24px, 0)}}@keyframes loading--ellipsis2{0%{-webkit-transform:translate(0, 0);transform:translate(0, 0)}100%{-webkit-transform:translate(24px, 0);transform:translate(24px, 0)}}.navbar{display:-webkit-flex;display:flex;padding:0 24px;height:70px;-webkit-align-items:center;align-items:center;-webkit-justify-content:space-between;justify-content:space-between}.navbar__group{display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center;height:100%}.navbar__title{margin:0;font-size:40px;text-decoration:none;font-weight:900;color:#004777}.navbar__search-form{height:100%;display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center}.navbar__search-input{height:30px;width:120px;font-size:16px;margin:0 12px}@media print, screen and (min-width: 40em){.navbar__search-input{width:200px}}@media print, screen and (min-width: 64em){.navbar__search-input{width:380px}}.navbar__search-suggestions{margin:0 12px}@media print, screen and (min-width: 40em){.navbar__search-suggestions{width:200px}}@media print, screen and (min-width: 64em){.navbar__search-suggestions{width:380px}}.navbar__search-submit{margin:0 12px}.navbar__user{height:100%;display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center;font-size:16px;font-weight:600}.navbar__user-actions{position:relative;height:100%;padding:12px 24px}.navbar__user-actions:hover{background-color:#EBEBEB}.navbar__user-actions:hover .navbar__dropdown{display:-webkit-flex;display:flex}.navbar__dropdown{display:none;position:absolute;width:150px;padding:12px;right:0;top:70px;border:1px #C2C2C2 solid;-webkit-align-items:center;align-items:center;-webkit-flex-direction:column;flex-direction:column}.navbar__dropdown a{font-size:14px;margin-bottom:12px}@media print, screen and (min-width: 64em){.navbar--mobile{display:none}}@media print, screen and (max-width: 63.99875em){.navbar--desktop{display:none}}.page-wrapper{background-color:#EBEBEB;display:-webkit-flex;display:flex;-webkit-justify-content:center;justify-content:center;min-height:80vh}@media print, screen and (min-width: 40em){.page-wrapper{padding:0 12px}}.page-wrapper__content{background-color:#fff;width:100%}@media print, screen and (min-width: 40em){.page-wrapper__content{width:640px}}@media print, screen and (min-width: 64em){.page-wrapper__content{width:1024px}}@media screen and (min-width: 75em){.page-wrapper__content{width:1200px}}@media screen and (min-width: 90em){.page-wrapper__content{width:1440px}}.page-wrapper--navbar{background-color:#fff;border-bottom:gray 2px solid;min-height:0}.page-wrapper--footer{background-color:#003152;min-height:0;-webkit-justify-content:left;justify-content:left}.page{padding:24px}.player__body{display:-webkit-flex;display:flex;-webkit-flex-direction:column;flex-direction:column}@media print, screen and (min-width: 64em){.player__body{-webkit-flex-direction:row;flex-direction:row}}.player__table{-webkit-align-self:center;align-self:center;margin-bottom:12px}@media print, screen and (min-width: 64em){.player__table{-webkit-align-self:auto;align-self:auto}}.player__chart{height:400px;display:-webkit-flex;display:flex;-webkit-flex-grow:1;flex-grow:1}.table{border-collapse:collapse;font-weight:600}.table__row{border-top:#000 solid 1px}.table__row:nth-child(even){background-color:#EBEBEB}.table__row:last-child{border-bottom:#000 solid 1px}.table__row--head{background-color:#C2C2C2}.table__data{border-right:#000 solid 1px}.table__data:first-child{border-left:#000 solid 1px}.table-container{overflow:scroll}@media print, screen and (min-width: 64em){.table-container{overflow:unset}}.teams-list{margin-bottom:12px}.teams-list__team{font-size:18px;font-weight:600;margin-bottom:12px}.team__title{font-size:36px;font-weight:900}.team__action{cursor:pointer}.team__action--icon{font-size:24px;margin-left:6px}.team__column{display:-webkit-flex;display:flex;-webkit-flex-direction:column;flex-direction:column;-webkit-align-items:center;align-items:center}.lineup-player{display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center}.lineup-player__action{margin-left:3px}.lineup-player__form{display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center}.lineup-player__form input{width:100px}.lineup-player__form-actions{display:-webkit-flex;display:flex}.team-field{height:300px;width:300px;position:relative;background-size:300px;background-repeat:no-repeat;background-position:center bottom;font-size:12px}.team-field::before{content:\"\";position:absolute;top:0;right:0;bottom:0;left:0;background-color:rgba(255,255,255,0.8)}@media print, screen and (min-width: 40em){.team-field{font-size:14px;height:400px;width:400px;background-size:400px}}.team-field__form-actions{position:absolute;bottom:-12px;display:-webkit-flex;display:flex;-webkit-justify-content:space-around;justify-content:space-around;width:300px}@media print, screen and (min-width: 40em){.team-field__form-actions{width:400px}}.team-field__player{position:absolute;background-color:#fff;padding:6px;border:1px #000 solid;border-radius:3px}.team-field__player--pitcher{bottom:40%;left:50%;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}.team-field__player--catcher{bottom:10%;left:50%;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}.team-field__player--first-base{bottom:40%;left:85%;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}.team-field__player--second-base{bottom:60%;left:70%;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}.team-field__player--third-base{bottom:40%;left:15%;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}.team-field__player--short-stop{bottom:60%;left:30%;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}.team-field__player--left-fielder{bottom:75%;left:15%;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}.team-field__player--center-fielder{bottom:90%;left:50%;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}.team-field__player--right-fielder{bottom:75%;left:85%;-webkit-transform:translate(-50%, 0);transform:translate(-50%, 0)}.typeahead{position:relative}.typeahead-results{position:absolute;z-index:1000;background-color:#fff;border:1px #8a8a8a solid}.typeahead-results__result{padding:6px;border-bottom:1px #8a8a8a solid;cursor:pointer}.typeahead-results__result:last-child{border-bottom:none}.typeahead-results__result:hover{background-color:#0093F5}\n\n","body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group xy-grid\n////\n\n// Margin Grid classes\n@mixin xy-base-grid-classes {\n\n  // Grid Container\n  .grid-container {\n    @include xy-grid-container;\n\n    &.fluid {\n      @include xy-grid-container(100%);\n    }\n\n    &.full {\n      @include xy-grid-container(100%, 0);\n    }\n  }\n\n  // Base grid styles\n  .grid-x {\n    @include xy-grid;\n  }\n\n  .cell {\n    @include xy-cell(full, $gutter-type: none);\n\n    &.auto {\n      @include xy-cell-base(auto);\n    }\n\n    &.shrink {\n      @include xy-cell-base(shrink);\n    }\n\n  }\n  .grid-x {\n    > .auto {\n      @include xy-cell-size(auto, $gutter-type: none);\n    }\n\n    > .shrink {\n      @include xy-cell-size(shrink, $gutter-type: none);\n    }\n  }\n\n  // Auto width\n  @include -zf-each-breakpoint() {\n    // This is a bit of a hack/workaround, see these issues & PRs for the backstory:\n    // https://github.com/foundation/foundation-sites/issues/10244\n    // https://github.com/foundation/foundation-sites/pull/10222 and\n    // https://github.com/foundation/foundation-sites/pull/10164\n    .grid-x {\n      $str: \"> .#{$-zf-size}-shrink, > .#{$-zf-size}-full\";\n      @for $i from 1 through $grid-columns {\n        $str: $str + \", > .#{$-zf-size}-#{$i}\"\n      }\n      #{$str} {\n        flex-basis: auto;\n      }\n    }\n  }\n\n  @include -zf-each-breakpoint() {\n    // Responsive \"auto\" modifier\n    @if not($-zf-size == $-zf-zero-breakpoint) {\n      .grid-x > .#{$-zf-size}-auto {\n        @include xy-cell(auto, $gutter-type: none);\n      }\n    }\n\n    %-xy-cell-base-shrink-horizontal-#{$-zf-size} {\n      @include xy-cell-base(shrink);\n    }\n\n    // Responsive \"shrink\" modifier\n    @if not($-zf-size == $-zf-zero-breakpoint) {\n      .grid-x > .#{$-zf-size}-shrink {\n        @extend %-xy-cell-base-shrink-horizontal-#{$-zf-size};\n        @include xy-cell-size(shrink, $gutter-type: none);\n      }\n    }\n\n    // Responsive width modifiers\n    @for $i from 1 through $grid-columns {\n      // Sizing (percentage)\n      .grid-x > .#{$-zf-size}-#{$i} {\n        @extend %-xy-cell-base-shrink-horizontal-#{$-zf-size};\n        @include xy-cell-size($i, $gutter-type: none);\n      }\n    }\n  }\n\n  // Reset width when using `.grid-margin-x` not on `.grid-x`\n  .grid-margin-x:not(.grid-x) > .cell {\n    width: auto;\n  }\n\n  // Reset height when using `.grid-margin-y` not on `.grid-y`\n  .grid-margin-y:not(.grid-y) > .cell {\n    height: auto;\n  }\n}\n\n@mixin -xy-breakpoint-cell-classes($class-breakpoint, $gutter-breakpoint, $vertical) {\n  $prefix: if($class-breakpoint == $-zf-zero-breakpoint, '', '#{$class-breakpoint}-');\n  > .#{$prefix}auto {\n    @include xy-cell-size(auto, $vertical: $vertical);\n  }\n\n  > .#{$prefix}shrink {\n    @include xy-cell-size(shrink, $vertical: $vertical);\n  }\n\n  @for $i from 1 through $grid-columns {\n    // Sizing (percentage)\n    $classname: if($vertical, '.#{$class-breakpoint}-#{$i}', '.#{$class-breakpoint}-#{$i}');\n\n    > #{$classname} {\n      @include xy-cell-size($i, $vertical: $vertical);\n    }\n  }\n}\n\n// Margin Grid classes\n@mixin xy-margin-grid-classes(\n  $gutter-position: left right,\n  $vertical: false,\n  $wrapping-selector: '.grid-margin-x'\n){\n  #{$wrapping-selector} {\n    @include xy-gutters($negative: true, $gutter-position: $gutter-position);\n\n    // Base cell styles\n    > .cell {\n      @include xy-cell($vertical: $vertical, $output: (size gutters));\n    }\n\n    // base styles need to all be before the auto and shrink styles\n    @include -zf-each-breakpoint() {\n      @if(type-of($grid-margin-gutters) == 'map' and map-has-key($grid-margin-gutters, $-zf-size) and $-zf-size != $-zf-zero-breakpoint) {\n        > .cell {\n          @include xy-cell($vertical: $vertical, $output: (size gutters));\n        }\n      }\n    }\n\n    @include -zf-each-breakpoint() {\n\n      // This is purely for responsive gutters - the margin grid has to go back and adjust widths (or heights)\n      // for all prior breakpoints.\n      // As their gutter is defined with their width/height, even breakpoint without a new margin must be\n      // generated to not having their width/height overrided by re-adjusted smaller breakpoints.\n      @if(type-of($grid-margin-gutters) == 'map' and map-has-key($grid-margin-gutters, $-zf-size)) {\n        @each $bp in -zf-breakpoints-less-than($-zf-size) {\n          @include -xy-breakpoint-cell-classes($bp, $-zf-size, $vertical);\n        }\n      }\n\n      @include -xy-breakpoint-cell-classes($-zf-size, $-zf-size, $vertical);\n    }\n  }\n}\n\n// Padding Grid classes\n@mixin xy-padding-grid-classes {\n  .grid-padding-x {\n\n    // Negative margin for nested grids\n    .grid-padding-x {\n      @include xy-gutters($negative: true);\n    }\n\n    // Negative margin for grids within `grid-container/grid-container.fluid`\n    // This allows margin and padding grids to line up with eachother\n    .grid-container:not(.full) > & {\n      @include xy-gutters($negative: true);\n    }\n\n    // Base cell styles\n    > .cell {\n      @include xy-gutters($gutters: $grid-padding-gutters, $gutter-type: padding);\n    }\n  }\n}\n\n// Block Grid classes\n@mixin xy-block-grid-classes($margin-grid: true, $padding-grid: true) {\n  @if $padding-grid {\n    @include -zf-each-breakpoint {\n      @for $i from 1 through $xy-block-grid-max {\n        .#{$-zf-size}-up-#{$i} {\n          @include xy-grid-layout($n: $i, $selector: '.cell', $gutter-type: padding, $output: (size));\n        }\n      }\n    }\n  }\n\n  @if $margin-grid {\n    @include -zf-each-breakpoint {\n      @for $i from 1 through $xy-block-grid-max {\n        // This is purely for responsive gutters - the margin grid has to go back and adjust widths (or heights)\n        // for prior breakpoints based on the responsive gutter.\n        @if(type-of($grid-margin-gutters) == 'map' and map-has-key($grid-margin-gutters, $-zf-size)) {\n          @each $bp in -zf-breakpoints-less-than($-zf-size) {\n            @if(map-has-key($grid-margin-gutters, $bp)) {\n              .grid-margin-x.#{$bp}-up-#{$i} {\n                @include xy-grid-layout($n: $i, $selector: '.cell', $gutter-type: margin, $output: (size));\n              }\n            }\n          }\n        }\n      }\n      @for $i from 1 through $xy-block-grid-max {\n        .grid-margin-x.#{$-zf-size}-up-#{$i} {\n          @include xy-grid-layout($n: $i, $selector: '.cell', $gutter-type: margin, $output: (size));\n        }\n      }\n    }\n  }\n}\n\n// Collapse classes\n@mixin xy-collapse-grid-classes($margin-grid: true, $padding-grid: true) {\n  @each $bp in $breakpoint-classes {\n    @if $margin-grid {\n      .#{$bp}-margin-collapse {\n        @include xy-grid-collapse($gutter-type: margin, $min-breakpoint: $bp);\n      }\n    }\n\n    @if $padding-grid {\n      .#{$bp}-padding-collapse {\n        @include xy-grid-collapse($gutter-type: padding, $min-breakpoint: $bp);\n      }\n    }\n  }\n}\n\n// Offset classes\n@mixin xy-offset-cell-classes {\n  @include -zf-each-breakpoint {\n    @for $i from 1 through $grid-columns {\n      // Offsets\n      $o: $i - 1;\n\n      .#{$-zf-size}-offset-#{$o} {\n        @include xy-cell-offset($o, $gutters: $grid-padding-gutters, $gutter-type: padding);\n      }\n\n      .grid-margin-x > .#{$-zf-size}-offset-#{$o} {\n        @include xy-cell-offset($o);\n      }\n    }\n  }\n}\n\n// Vertical Grid classes\n@mixin xy-vertical-grid-classes(\n  $margin-grid: true,\n  $padding-grid: true\n) {\n\n  @include -zf-each-breakpoint() {\n    @if not($-zf-size == $-zf-zero-breakpoint) {\n    }\n  }\n\n  .grid-y {\n    @include xy-grid(vertical, false);\n\n\n    > .cell {\n      @include xy-cell-reset();\n    }\n\n    > .auto {\n      @include xy-cell-size(auto, $gutter-type: none, $vertical: true);\n    }\n\n    > .shrink {\n      @include xy-cell-size(shrink, $gutter-type: none, $vertical: true);\n    }\n\n\n    @include -zf-each-breakpoint() {\n      // This is a bit of a hack/workaround, see these issues and PRs for the backstory:\n      // https://github.com/foundation/foundation-sites/issues/10244\n      // https://github.com/foundation/foundation-sites/pull/10222 and\n      // https://github.com/foundation/foundation-sites/pull/10164\n      $str: \"> .#{$-zf-size}-shrink, > .#{$-zf-size}-full\";\n      @for $i from 1 through $grid-columns {\n        $str: $str + \", > .#{$-zf-size}-#{$i}\"\n      }\n      #{$str} {\n        flex-basis: auto;\n      }\n    }\n\n    @include -zf-each-breakpoint() {\n      // Responsive \"auto\" modifier\n      @if not($-zf-size == $-zf-zero-breakpoint) {\n        > .#{$-zf-size}-auto {\n          @include xy-cell(auto, $gutter-type: none, $vertical: true);\n        }\n      }\n\n      %-xy-cell-base-shrink-vertical-#{$-zf-size} {\n        @include xy-cell-base(shrink);\n      }\n\n      // Responsive \"shrink\" modifier\n      @if not($-zf-size == $-zf-zero-breakpoint) {\n        > .#{$-zf-size}-shrink {\n          @extend %-xy-cell-base-shrink-vertical-#{$-zf-size};\n          @include xy-cell-size(shrink, $gutter-type: none, $vertical: true);\n        }\n      }\n\n      // Responsive width modifiers\n      @for $i from 1 through $grid-columns {\n        // Sizing (percentage)\n        > .#{$-zf-size}-#{$i} {\n          @extend %-xy-cell-base-shrink-vertical-#{$-zf-size};\n          @include xy-cell-size($i, $gutter-type: none, $vertical: true);\n        }\n      }\n\n    }\n  }\n\n  @if $padding-grid {\n    .grid-padding-y {\n      // Negative margin for nested grids\n      .grid-padding-y {\n        @include xy-gutters($negative: true, $gutter-position: top bottom);\n      }\n\n      // Base cell styles\n      > .cell {\n        @include xy-gutters($gutters: $grid-padding-gutters, $gutter-type: padding, $gutter-position: top bottom);\n      }\n    }\n  }\n\n  @if $margin-grid {\n    @include xy-margin-grid-classes(top bottom, true, '.grid-margin-y');\n  }\n\n}\n\n@mixin xy-frame-grid-classes($vertical-grid: true, $margin-grid: true) {\n  // Framed grid styles\n  .grid-frame {\n    @include xy-grid-frame;\n  }\n\n  .cell .grid-frame {\n    width: 100%; // Same as include with $nested, but with less css\n  }\n\n  .cell-block {\n    @include xy-cell-block();\n  }\n\n  .cell-block-y {\n    @include xy-cell-block(true);\n  }\n\n\n  .cell-block-container {\n    @include xy-cell-block-container();\n  }\n\n\n  @include -zf-each-breakpoint(false) {\n\n    .#{$-zf-size}-grid-frame {\n      @include xy-grid-frame;\n    }\n\n    .cell .#{$-zf-size}-grid-frame {\n      width: 100%; // Same as include with $nested, but with less css\n    }\n\n    .#{$-zf-size}-cell-block {\n      @include xy-cell-block();\n    }\n\n    .#{$-zf-size}-cell-block-container {\n      @include xy-cell-block-container();\n    }\n\n    .#{$-zf-size}-cell-block-y {\n      @include xy-cell-block(true);\n    }\n  }\n\n  @if $vertical-grid {\n    .grid-y {\n      &.grid-frame {\n        width: auto;\n        @include xy-grid-frame(true);\n      }\n\n      @include -zf-each-breakpoint(false) {\n        &.#{$-zf-size}-grid-frame {\n          width: auto;\n          @include xy-grid-frame(true);\n        }\n\n      }\n    }\n    .cell {\n      .grid-y.grid-frame {\n        height: 100%; // Same as include with $nested, but with less css\n      }\n      @include -zf-each-breakpoint(false) {\n        .grid-y.#{$-zf-size}-grid-frame {\n          height: 100%; // Same as include with $nested, but with less css\n        }\n      }\n    }\n  }\n  @if $margin-grid {\n    @include xy-margin-grid-classes(top bottom, true, '.grid-margin-y');\n    .grid-frame.grid-margin-y {\n      @include xy-grid-frame(true, false, $grid-margin-gutters, $include-base: false);\n    }\n    @include -zf-each-breakpoint(false) {\n      .grid-margin-y.#{$-zf-size}-grid-frame {\n        @include xy-grid-frame(true, false, $grid-margin-gutters, $-zf-size, false);\n      }\n    }\n  }\n}\n\n// Final classes\n@mixin foundation-xy-grid-classes(\n  $base-grid: true,\n  $margin-grid: true,\n  $padding-grid: true,\n  $block-grid: true,\n  $collapse: true,\n  $offset: true,\n  $vertical-grid: true,\n  $frame-grid: true\n) {\n\n  // Base grid styles\n  @if($base-grid) {\n    @include xy-base-grid-classes();\n  }\n\n  // Margin grid\n  @if($margin-grid) {\n    @include xy-margin-grid-classes();\n  }\n\n  // Padding grid\n  @if($padding-grid) {\n    @include xy-padding-grid-classes();\n  }\n\n  // Block grid\n  @if($block-grid) {\n    @include xy-block-grid-classes($margin-grid, $padding-grid);\n  }\n\n  // Collapse gutters\n  @if($collapse) {\n    @include xy-collapse-grid-classes($margin-grid, $padding-grid);\n  }\n\n  // Offset gutters\n  @if($offset) {\n    @include xy-offset-cell-classes();\n  }\n\n  // Vertical grid\n  @if($vertical-grid) {\n    @include xy-vertical-grid-classes($margin-grid, $padding-grid);\n  }\n\n  @if ($frame-grid) {\n    @include xy-frame-grid-classes($vertical-grid, $margin-grid)\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group xy-grid\n////\n\n/// Create gutters for a cell/container.\n///\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts either margin or padding.\n/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Boolean} $negative [false] - Whether to apply the gutter as a negative value. Commonly used for nested grids.\n@mixin xy-gutters(\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: right left,\n  $negative: false\n) {\n  $operator: if($negative, '-', '');\n\n  // If we have declared negative gutters, force type to `margin.\n  $gutter-type: if($negative, 'margin', $gutter-type);\n\n  // Output our margin gutters.\n  @if (type-of($gutters) == 'map') {\n    @include -zf-breakpoint-value(auto, $gutters) {\n      $gutter: rem-calc($-zf-bp-value) / 2;\n\n      // Loop through each gutter position\n      @each $value in $gutter-position {\n        #{$gutter-type}-#{$value}: unquote(\"#{$operator}#{$gutter}\");\n      }\n    }\n  }\n  @else if (type-of($gutters) == 'number') {\n    $gutter: rem-calc($gutters) / 2;\n\n    // Loop through each gutter position\n    @each $value in $gutter-position {\n      #{$gutter-type}-#{$value}: unquote(\"#{$operator}#{$gutter}\");\n    }\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group xy-grid\n////\n\n/// Creates a max width container, designed to house your grid content.\n///\n/// @param {Number} $width [$grid-container] - a width to limit the container to.\n/// @param {Number} $padding [$grid-container-padding] - paddings of the container.\n@mixin xy-grid-container(\n  $width: $grid-container,\n  $padding: $grid-container-padding\n) {\n  @include xy-gutters($gutters: $padding, $gutter-type: padding);\n\n  max-width: $width;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n/// Creates a container for your flex cells.\n///\n/// @param {Keyword} $direction [horizontal] - Either horizontal or vertical direction of cells within.\n/// @param {Boolean} $wrap [true] - If the cells within should wrap or not.\n@mixin xy-grid(\n  $direction: horizontal,\n  $wrap: true\n) {\n  $direction: if($direction == 'horizontal', row, column);\n  $wrap: if($wrap, wrap, nowrap);\n\n  display: flex;\n  flex-flow: $direction $wrap;\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group functions\n////\n\n$global-font-size: 100% !default;\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n///\n/// @param {Number} $num - Number to strip unit from.\n///\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n///\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$global-font-size` variable as the base.\n///\n/// @returns {List} A list of converted values.\n@function rem-calc($values, $base: null) {\n  $rem-values: ();\n  $count: length($values);\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  // Using rem as base allows correct scaling\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n  // Pixel and unitless values are converted to rems\n  @if unit($value) == 'px' or unitless($value) {\n    $value: rem-calc($value, $base: 16px);\n  }\n\n  // Then the value is converted to ems\n  @return strip-unit($value) * 1em;\n}\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.\n/// @access private\n///\n/// @param {Number} $value - Pixel value to convert.\n/// @param {Number} $base [null] - Base for pixel conversion.\n///\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n@function -zf-to-rem($value, $base: null) {\n  // Check if the value is a number\n  @if type-of($value) != 'number' {\n    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n    @return $value;\n  }\n\n  // Transform em into rem if someone hands over 'em's\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * 1rem;\n  }\n\n  // Calculate rem if units for $value is not rem or em\n  @if unit($value) != 'rem' {\n    $value: strip-unit($value) / strip-unit($base) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  @if $value == 0rem {\n    $value: 0;\n  }\n\n  @return $value;\n}\n\n/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.\n///\n/// @param {Number} $value - Value to convert to a unitless line height\n/// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size\n///\n/// @return {Number} - Unitless number\n@function unitless-calc($value, $base: null) {\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // First, lets convert our $base to pixels\n\n  // If the base font size is a %, then multiply it by 16px\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if unit($base) == 'em' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  // Now let's convert our value to pixels too\n  @if unit($value) == '%' {\n    $value: ($value / 100%) * $base;\n  }\n\n  @if unit($value) == 'rem' {\n    $value: strip-unit($value) * $base;\n  }\n\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * $base;\n  }\n\n  // 'px'\n  @if unit($value) == 'px' {\n    @return strip-unit($value) / strip-unit($base);\n  }\n\n  // assume that line-heights greater than 10 are meant to be absolute in 'px'\n  @if unitless($value) and ($value > 10) {\n    @return $value / strip-unit($base);\n  }\n\n  @return $value;\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n) !default;\n\n/// A list of named HiDPI breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries for resolutions.\n/// Values must represent the device pixels / web pixels ration and be unitless or in DPPX.\n/// @type Map\n$breakpoints-hidpi: (\n  hidpi-1: 1,\n  hidpi-1-5: 1.5,\n  hidpi-2: 2,\n  retina: 2,\n  hidpi-3: 3\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'The first key in the $breakpoints map must have a value of \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Web standard Pixels per inch. (1ddpx / $std-web-dpi) = 1dpi\n  // See https://www.w3.org/TR/css-values-3/#absolute-lengths\n  $std-web-dpi: 96;\n\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value of the following breakpoint\n  $bp-next: null;\n  // Value for max-width media queries\n  $bp-min: null;\n  // Value for min-width media queries\n  $bp-max: null;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // If named, name of the breakpoint\n  $name: null;\n  // If the breakpoint is a HiDPI breakpoint\n  $hidpi: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n\n  // If a breakpoint name is given, get its value from the $breakpoints/$breakpoints-hidpi map.\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints, $name);\n      $bp-next: -zf-map-next($breakpoints, $name);\n    }\n    @else if map-has-key($breakpoints-hidpi, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints-hidpi, $name);\n      $bp-next: -zf-map-next-number($breakpoints-hidpi, $bp);\n      $hidpi: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your `$breakpoints` or `$breakpoints-hidpi` setting.';\n    }\n  }\n\n  @if not $name and $dir == 'only' {\n    @warn 'breakpoint(): Only named media queries can have an `only` range.';\n    @return null;\n  }\n\n  // Only 'only' and 'up' have a min limit.\n  @if $dir == 'only' or $dir == 'up' {\n    $bp-min: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n  }\n  // Only 'only' and 'down' have a max limit.\n  @if $dir == 'only' or $dir == 'down' {\n    // If the breakpoint is a value, use it as max limit.\n    @if not $name {\n      $bp-max: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n    }\n    // If the breakpoint is named, the max limit is the following breakpoint - 1px.\n    @else if $bp-next {\n      // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).\n      // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.\n      // See https://github.com/foundation/foundation-sites/issues/11313\n      $bp-max: if($hidpi, $bp-next - (1/$std-web-dpi), -zf-bp-to-em($bp-next) - 0.00125);\n    }\n  }\n\n  // Generate the media query string from min and max limits.\n  @if $hidpi {\n    // Generate values in DPI instead of DPPX for an IE9-11/Opera mini compatibility.\n    // See https://caniuse.com/#feat=css-media-resolution\n    $bp-min-dpi: if($bp-min, $bp-min * $std-web-dpi * 1dpi, $bp-min);\n    $bp-max-dpi: if($bp-max, $bp-max * $std-web-dpi * 1dpi, $bp-max);\n    @return zf-str-join(\n      -zf-bp-join($bp-min, $bp-max, '-webkit-min-device-pixel-ratio', '-webkit-max-device-pixel-ratio'),\n      -zf-bp-join($bp-min-dpi, $bp-max-dpi, 'min-resolution', 'max-resolution'),\n      ', ');\n  }\n  @else {\n    @return -zf-bp-join($bp-min, $bp-max);\n  }\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` and `$breakpoints-hidpi` maps, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// If multiple values are passed, the mixin will generate a media query for each of them as described above.\n/// Since the content is duplicated for each breakpoint, this mixin should only be used with properties that\n/// change across breakpoints.\n///\n/// @param {Keyword|Number} $values... - Breakpoint name or px/rem/em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($values...) {\n  @for $i from 1 through length($values) {\n    $value: nth($values, $i);\n    $str: breakpoint($value);\n    $bp: index($-zf-breakpoints-keys, nth($value, 1));\n    $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n    // Direction of media query (up, down, or only)\n    $dir: if(length($value) > 1, nth($value, 2), up);\n\n    $old-zf-size: null;\n\n    // Make breakpoint size available as a variable\n    @if global-variable-exists(-zf-size) {\n      $old-zf-size: $-zf-size;\n    }\n    $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n    // If $str is still an empty string, no media query is needed\n    @if $str == '' {\n      @content;\n    }\n\n    // Otherwise, wrap the content in a media query\n    @else {\n      // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n      // generate print if the breakpoint affects the print-breakpoint (or smaller).\n      // This means the current condition only needs to be extended so 'down' always generates print.\n      @if $bp != null and ($bp <= $pbp or $dir == down) {\n        @media print, screen and #{$str} {\n          @content;\n        }\n      }\n      @else {\n        @media screen and #{$str} {\n          @content;\n        }\n      }\n    }\n\n    $-zf-size: $old-zf-size !global;\n  }\n}\n\n/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Find the next number in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $number - Number to use as a starting point.\n///\n/// @returns {Mixed} The number following `$number`, if `$number` was found. If `$number` was not found, or `$number` was the biggest number in the map, returns `null`.\n@function -zf-map-next-number($map, $number) {\n\n  $next_number: null;\n\n  @each $k, $v in $map {\n    @if type-of($v) == 'number' and $v > $number and ($next_number == null or $v < $next_number) {\n      $next_number: $v;\n    }\n  }\n\n  @return $next_number;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoint - a named or non-named breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n/// Return the best breakpoint to use according to the calling context. It returns in order:\n/// 1. the given `$value` argument if it is not null.\n/// 2. the global breakpoint context `$-zf-size` if it is not null (like if called inside then `breakpoint()` mixin)\n/// 3. the given `$default` argument.\n/// @access private\n///\n/// @param {Keyword} $value [null] - Breakpoint to use in priority if non-null.\n/// @param {Keyword} $default [null] - Breakpoint to use by default if no other value can be used.\n///\n/// @return {Keyword} The resolved breakpoint.\n@function -zf-current-breakpoint($value: null, $default: null) {\n  @if ($value != null) {\n    @return $value;\n  }\n  @else if (variable-exists(-zf-size) and type-of($-zf-size) != 'number') and $-zf-size != null {\n    @return $-zf-size;\n  }\n  @else {\n    @return $default;\n  }\n}\n\n/// Return media query string from the given min and/or max limits.\n/// If a limit is equal to `null` or `0`, it is ignored.\n/// @access private\n///\n/// @param {Number} $min [0] - Min media query limit.\n/// @param {Number} $max [0] - Max media query limit.\n/// @param {String} $min-name ['min-width'] - Name of the min media query limit.\n/// @param {String} $delimiter ['max-width'] - Name of the max media query limit.\n///\n/// @returns {String} Media Query string.\n@function -zf-bp-join(\n  $min: 0,\n  $max: 0,\n  $min-name: 'min-width',\n  $max-name: 'max-width'\n) {\n  @return zf-str-join(\n    if($min and $min > 0, '(#{$min-name}: #{$min})', null),\n    if($max and $max > 0, '(#{$max-name}: #{$max})', null),\n    ' and ');\n}\n\n$small-up: '';\n$small-only: '';\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n$medium-up: '';\n$medium-only: '';\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n$large-up: '';\n$large-only: '';\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n$xlarge-up: '';\n$xlarge-only: '';\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n$xxlarge-up: '';\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group xy-grid\n////\n\n/// Returns the appropriate CSS flex value for a cell base.\n///\n/// @param {Keyword} $size [full] - The size of your cell. Accepts `full`, `auto`, `shrink`, `grow`, or any other value representing a cell size (it will be treated as `shrink`).\n///\n/// @returns {List} The cell flex property value.\n@function xy-cell-base($size: full) {\n  @if ($size == 'auto') {\n    @return 1 1 0px;\n  }\n  @else if ($size == 'grow') {\n    @return 1 0 auto;\n  }\n  @else if ($size == 'shrink' or $size == 'full' or zf-is-fraction($size, $allow-no-denominator: true)) {\n    @return 0 0 auto;\n  }\n  @return null;\n}\n\n/// Calculate the size of a cell gutters.\n///\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If `auto`, returns the responsive gutters map `$gutters`. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n///\n/// @returns {Number|Map} The cell gutter size or the responsive gutters map.\n@function xy-cell-gutters(\n  $gutters: $grid-margin-gutters,\n  $breakpoint: null\n) {\n  // For `auto`, returns the responsive map `$gutters`.\n  @if ($breakpoint == 'auto') {\n    @return $gutters;\n  }\n\n  // Use the contextual breakpoint by default.\n  $breakpoint: -zf-current-breakpoint($breakpoint);\n\n  @if ($breakpoint) {\n    @return -zf-get-bp-val($gutters, $breakpoint);\n  }\n  @else {\n    @return -zf-get-bp-val($gutters, $-zf-zero-breakpoint) or 0;\n  }\n}\n\n/// Returns the percentage size of a cell.\n///\n/// @param {Number|List} $size [$grid-columns] - Size to make the cell. You can pass a value in multiple formats, such as `6`, `50%`, `1 of 2` or `1/3`.\n///\n/// @returns {Number} Size of the cell (in percent).\n@function xy-cell-size(\n  $size: $grid-columns\n) {\n  @return fraction-to-percentage($size, $denominator: $grid-columns);\n}\n\n/// Returns the appropriate CSS value for a cell size.\n///\n/// Gutters-related arguments are required for cells with margin gutters (by default) as the gutter is included in the width.\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full`, `auto`, `shrink` or any fraction like `6`, `50%`, `1 of 2` or `1/2`.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin`, `padding` or `none`.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If `auto`, returns a map of sizes adapted to responsive gutters. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n///\n/// @returns {Number|String|Map} The cell sizing property value, or a responsive map of them.\n@function xy-cell-size-css(\n  $size: full,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: null\n) {\n  $margin-gutter: 0;\n\n  @if ($size == 'auto' or $size == 'shrink') {\n    @return auto;\n  }\n\n  // For cells with margin gutters, the gutter is included in the width.\n  @if ($gutter-type == 'margin') {\n    $margin-gutter: xy-cell-gutters($gutters, $breakpoint);\n    @if ($margin-gutter == null) {\n      @error 'xy-cell-size: no gutters were found in `$gutters` for \"$breakpoint: #{$breakpoint}\"';\n    }\n  }\n\n  // Calculate the cell size (number)\n  $size-raw: if($size == 'full', 100%, xy-cell-size($size));\n\n  // Calculate the cell CSS size including gutters (string)\n  // If the cell has responsive margin gutters, return a responsive map of sizes.\n  @if type-of($margin-gutter) == 'map' {\n    $responsive-css-sizes: ();\n\n    @each $bp, $mg in $margin-gutter {\n      $size-css: if($mg == 0, $size-raw, calc(#{$size-raw} - #{rem-calc($mg)}));\n      $responsive-css-sizes: map-merge($responsive-css-sizes, ($bp: $size-css));\n    }\n\n    @return $responsive-css-sizes;\n  }\n  // Otherwise, return a single CSS size.\n  @else {\n    $css-size: if($margin-gutter == 0, $size-raw, calc(#{$size-raw} - #{rem-calc($margin-gutter)}));\n    @return $css-size;\n  }\n}\n\n/// Sets base flex properties for cells.\n///\n/// @param {Keyword} $size [full] - The size of your cell. Accepts `full`, `auto`, `shrink`, `grow`, or any other value representing a cell size (it will be treated as `shrink`).\n@mixin xy-cell-base($size: full) {\n  $base: xy-cell-base($size);\n\n  flex: #{$base};\n\n  // Set base styles for \"full\" only\n  @if($size == 'full') {\n    min-height: 0px;\n    min-width: 0px;\n  }\n}\n\n/// Resets a cells width (or height if vertical is true) as well as strips its gutters.\n///\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin xy-cell-reset($vertical: true) {\n  $direction: if($vertical == true, height, width);\n  #{$direction}: auto;\n  max-#{$direction}: none;\n}\n\n/// Sets sizing properties for cells.\n///\n/// Gutters-related arguments are required for cells with margin gutters (by default) as the gutter is included in the width.\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (100% width), `auto` (use all available space), `shrink` (use only the required space) or any fraction (`6`, `50%`, `1 of 2` or `1/2`...).\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin`, `padding` or `none`.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If `auto`, generates sizes adapted for responsive gutters. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin xy-cell-size(\n  $size: full,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: null,\n  $vertical: false\n) {\n  $sizes: xy-cell-size-css($size, $gutters, $gutter-type, $breakpoint);\n  $direction: if($vertical == true, height, width);\n\n  @if (type-of($sizes) == 'map') {\n    @include -zf-breakpoint-value(auto, $sizes) {\n      #{$direction}: $-zf-bp-value;\n    }\n  }\n  @else {\n    #{$direction}: $sizes;\n  }\n}\n\n/// Sets gutters properties for cells.\n///\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin`, `padding` or `none`.\n/// @param {List} $gutter-position [null] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination. By default `right left` for horizontal cells and `top bottom` for vertical cells.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If `auto`, generates responsive gutters. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Direction of the gutters to output. See `$gutter-position`.\n@mixin xy-cell-gutters(\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: null,\n  $breakpoint: null,\n  $vertical: false\n) {\n  // Get the default gutter position according to cell direction\n  @if($gutter-position == null) {\n    $gutter-position: if($vertical == true, top bottom, left right);\n  }\n\n  // Get the gutter width for this breakpoint\n  $gutter-width: xy-cell-gutters($gutters, $breakpoint);\n  @if ($gutter-width == null) {\n    @error 'xy-cell-gutters: no gutters were found in `$gutters` for \"$breakpoint: #{$breakpoint}\"';\n  }\n\n  @if ($gutter-type and $gutter-type != none) {\n    @include xy-gutters($gutter-width, $gutter-type, $gutter-position);\n  }\n}\n\n/// Creates a cell for your grid.\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (100% width), `auto` (use all available space), `shrink` (use only the required space) or any fraction (`6`, `50%`, `1 of 2` or `1/2`...).\n/// @param {Boolean} $gutter-output [null] - [DEPRECATED] Whether or not to output gutters.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin`, `padding` or `none`.\n/// @param {List} $gutter-position [null] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination. By default `right left` for horizontal cells and `top bottom` for vertical cells.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If `auto`, generates responsive gutters. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n/// @param {List} $output [(base size gutters)] - Cell parts to output. You will need to generate others parts of the cell seperately, it may not work properly otherwise.\n@mixin xy-cell(\n  $size: full,\n  $gutter-output: null,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: null,\n  $breakpoint: null,\n  $vertical: false,\n  $output: (base size gutters)\n) {\n  // Default for $gutter-output\n  @if ($gutter-output != null) {\n    @warn 'xy-cell: $gutter-output is deprecated and will be removed. See migration notes at https://git.io/foundation-6-6-0';\n    @if ($gutter-output == false) {\n      $output: sl-remove($output, gutters);\n    }\n  }\n\n  @if (index($output, base)) {\n    @include xy-cell-base($size);\n  }\n  @if (index($output, size)) {\n    @include xy-cell-size($size, $gutters, $gutter-type, $breakpoint, $vertical);\n  }\n  @if (index($output, gutters)) {\n    @include xy-cell-gutters($gutters, $gutter-type, $gutter-position, $breakpoint, $vertical);\n  }\n}\n\n/// Creates a single breakpoint sized grid. Used to generate our grid classes.\n///\n/// `xy-cell-static()` is deprecated and will be removed.\n/// Use `xy-cell()` instead with `$output: (size gutters)` to not generate the cell base.\n/// See migration notes at https://git.io/foundation-6-6-0\n///\n/// @deprecated v6.6.0\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (100% width), `auto` (use all available space), `shrink` (use only the required space) or any fraction (`6`, `50%`, `1 of 2` or `1/2`...).\n/// @param {Boolean} $gutter-output [true] - Whether or not to output gutters. Always `true` for margin gutters.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin xy-cell-static(\n  $size: full,\n  $gutter-output: true,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: $-zf-zero-breakpoint,\n  $vertical: false\n) {\n  @warn 'xy-cell-static() mixin is deprecated and will be removed. Use \"xy-cell()\" instead. See migration notes at https://git.io/foundation-6-6-0';\n\n  $gutter: -zf-get-bp-val($gutters, $breakpoint);\n  $gutter-position: if($vertical == true, top bottom, left right);\n\n  $-gutter-output: if($gutter-type == 'margin', true, $gutter-output);\n  $-gutter-margin: if($gutter-type == 'margin', $gutter, 0);\n\n  @include -xy-cell-properties($size, $-gutter-margin, $vertical);\n  @if ($-gutter-output) {\n    @include xy-gutters($gutter, $gutter-type, $gutter-position);\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group functions\n////\n\n/// Finds the greatest common divisor of two integers.\n///\n/// @param {Number} $a - First number to compare.\n/// @param {Number} $b - Second number to compare.\n///\n/// @returns {Number} The greatest common divisor.\n@function gcd($a, $b) {\n  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript\n  @if ($b != 0) {\n    @return gcd($b, $a % $b);\n  }\n  @else {\n    @return abs($a);\n  }\n}\n\n/// Handles decimal exponents by trying to convert them into a fraction and then use a nth-root-algorithm for parts of the calculation\n///\n/// @param {Number} $base - The base number.\n/// @param {Number} $exponent - The exponent.\n///\n/// @returns {Number} The product of the exponentiation.\n@function pow($base, $exponent, $prec: 16) {\n  @if (floor($exponent) != $exponent) {\n    $prec2 : pow(10, $prec);\n    $exponent: round($exponent * $prec2);\n    $denominator: gcd($exponent, $prec2);\n    @return nth-root(pow($base, $exponent / $denominator), $prec2 / $denominator, $prec);\n  }\n\n  $value: $base;\n  @if $exponent > 1 {\n    @for $i from 2 through $exponent {\n      $value: $value * $base;\n    }\n  }\n  @else if $exponent < 1 {\n    @for $i from 0 through -$exponent {\n      $value: $value / $base;\n    }\n  }\n\n  @return $value;\n}\n\n@function nth-root($num, $n: 2, $prec: 12) {\n  // From: http://rosettacode.org/wiki/Nth_root#JavaScript\n  $x: 1;\n\n  @for $i from 0 through $prec {\n    $x: 1 / $n * (($n - 1) * $x + ($num / pow($x, $n - 1)));\n  }\n\n  @return $x;\n}\n\n/// Calculates the height as a percentage of the width for a given ratio.\n/// @param {List} $ratio - Ratio to use to calculate the height, formatted as `x by y`.\n/// @return {Number} A percentage value for the height relative to the width of a responsive container.\n@function ratio-to-percentage($ratio) {\n  $w: nth($ratio, 1);\n  $h: nth($ratio, 3);\n  @return $h / $w * 100%;\n}\n\n/// Parse the given `$fraction` to numerators and denumerators.\n///\n/// @param {*} $fraction - Value representing a fraction to parse. It can be formatted as `50%`, `1 of 2`, `1/2` or `50` (no denominator would be returned).\n///\n/// @return {List} List of parsed values with numerator at first position and denumerator as second. These values may be null.\n@function zf-parse-fraction($fraction) {\n\n  @if type-of($fraction) == 'number' {\n    // \"50%\"\n    @if unit($fraction) == '%' {\n      @return (strip-unit($fraction), 100);\n    }\n    @else if (unit($fraction) == '') {\n      // \"0.5\"\n      @if $fraction < 1 {\n        @return ($fraction * 100, 100);\n      }\n      // \"50\"\n      @else {\n        @return ($fraction, null);\n      }\n    }\n  }\n\n  @else if type-of($fraction) == 'list' {\n    // \"50 of 100\", \"50/100\"...\n    @if length($fraction) == 3\n      and type-of(nth($fraction, 1) == 'number')\n      and type-of(nth($fraction, 3) == 'number') {\n      @return (nth($fraction, 1), nth($fraction, 3));\n    }\n  }\n\n  @return (null, null);\n}\n\n/// Returns whether the given `$value` represents a fraction. Supports formats like `50%`, `1 of 2`, `1 per 2` or `1/2`.\n///\n/// @param {*} $value - Value to test.\n/// @param {Boolean} $allow-no-denominator [false] - If `true`, simple numbers without denominators like `50` are supported.\n///\n/// @return {Boolean} `true` if `$value` represents a fraction, `false` otherwise.\n@function zf-is-fraction($value, $allow-no-denominator: false) {\n  $parsed: zf-parse-fraction($value);\n  @return not(nth($parsed, 1) == null\n    or (nth($parsed, 2) == null and $allow-no-denominator == false));\n}\n\n/// Calculate a percentage from a given fraction.\n///\n/// @param {Number|List} $fraction - Value representing a fraction to use to calculate the percentage, formatted as `50` (relative to `$denominator`), `50%`, `1 of 2` or `1/2`.\n/// @param {Number|List} $denominator - Default value to use as denominator when `$fraction` represents an absolute value.\n@function fraction-to-percentage(\n  $fraction,\n  $denominator: null\n) {\n  $parsed: zf-parse-fraction($fraction);\n  $parsed-nominator: nth($parsed, 1);\n  $parsed-denominator: nth($parsed, 2);\n\n  @if $parsed-nominator == null {\n    @error 'Wrong syntax for \"fraction-to-percentage()\". Use a number, decimal, percentage, or \"n of n\" / \"n/n\".';\n  }\n  @if $parsed-denominator == null {\n    @if type-of($denominator) == 'number' {\n      $parsed-denominator: $denominator;\n    }\n    @else {\n      @error 'Error with \"fraction-to-percentage()\". A default \"$denominator\" is required to support absolute values';\n    }\n  }\n\n  @return percentage($parsed-nominator / $parsed-denominator);\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group xy-grid\n////\n\n/// Sizes child elements so that `$n` number of items appear on each row.\n///\n/// @param {Number} $n - Number of elements to display per row.\n/// @param {String} $selector ['.cell'] - Selector(s) to use for child elements.\n/// @param {Boolean} $gutter-output [null] - [DEPRECATED] Whether or not to output gutters.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin`, `padding` or `none`.\n/// @param {List} $gutter-position [null] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination. By default `right left` for horizontal cells and `top bottom` for vertical cells.\n/// @param {String} $breakpoint [null] - The breakpoint to use for the cell generation. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n/// @param {List} $output [(base size gutters)] - Cell parts to output. You will need to generate others parts of the cell seperately, it may not work correctly otherwise.\n@mixin xy-grid-layout(\n  $n,\n  $selector: '.cell',\n  $gutter-output: null,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: null,\n  $breakpoint: null,\n  $vertical: false,\n  $output: (base size gutters)\n) {\n  $size: percentage(1/$n);\n\n  & > #{$selector} {\n    @include xy-cell($size, $gutter-output, $gutters, $gutter-type, $gutter-position, $breakpoint, $vertical, $output);\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group xy-grid\n////\n\n/// Collapses the grid a cells within it.\n///\n/// @param {String} $selector [.cell] - The child element to remove the gutter from.\n/// @param {Keyword} $gutter-type [margin] - The type of gutter to remove.\n/// @param {List} $gutter-position [right left] - The positions to remove gutters from. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Keyword} $min-breakpoint [$-zf-zero-breakpoint] - Minimum breakpoint in `$breakpoint-classes` for which to collapse the gutter.\n@mixin xy-grid-collapse(\n  $selector: '.cell',\n  $gutter-type: margin,\n  $gutter-position: right left,\n  $min-breakpoint: $-zf-zero-breakpoint\n) {\n  // First, lets negate any margins on the top level\n  @if ($gutter-type == 'margin') {\n\n    @include breakpoint($min-breakpoint) {\n      @each $value in $gutter-position {\n        margin-#{$value}: 0;\n      }\n\n      > #{$selector} {\n        @each $value in $gutter-position {\n          margin-#{$value}: 0;\n        }\n      }\n    }\n\n    $excluded-bps: -zf-breakpoints-less-than($min-breakpoint);\n\n    // Output new widths to not include gutters\n    @each $bp in $breakpoint-classes {\n      @if(sl-contain($excluded-bps, $bp)) {\n        @include breakpoint($min-breakpoint) {\n          @for $i from 1 through $grid-columns {\n            // Sizing (percentage)\n            > .#{$bp}-#{$i} {\n              @include xy-cell-size($i, $gutter-type: none);\n            }\n          }\n        }\n      } @else {\n        @include breakpoint($bp) {\n          @for $i from 1 through $grid-columns {\n            // Sizing (percentage)\n            > .#{$bp}-#{$i} {\n              @include xy-cell-size($i, $gutter-type: none);\n            }\n          }\n        }\n      }\n    }\n  }\n  @else {\n\n    @include breakpoint($min-breakpoint) {\n      @each $value in $gutter-position {\n        margin-#{$value}: 0;\n      }\n\n      > #{$selector} {\n        @each $value in $gutter-position {\n          padding-#{$value}: 0;\n        }\n      }\n    }\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group xy-grid\n////\n\n/// Returns the appropriate CSS value to offset a cell.\n///\n/// @param {Number|List} $n - Size to offset by. You can pass in any value accepted by the `xy-cell()` mixin, such as `6`, `50%`, or `1 of 2`.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] Map of gutters or single value to use for responsive gutters.\n/// @param {Keyword} $gutter-type [margin] The type of gutter to use. Can be `margin` or `padding`\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n///\n/// @returns {Number|String} The cell offset property value.\n@function xy-cell-offset(\n  $n,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: null\n) {\n  $breakpoint: -zf-current-breakpoint($breakpoint, $default: $-zf-zero-breakpoint);\n  $size: xy-cell-size($n);\n\n  $offset: $size;\n  @if ($gutter-type == 'margin') {\n    $gutter: rem-calc(xy-cell-gutters($gutters, $breakpoint) / 2);\n    $offset: if($gutter == 0, $size, calc(#{$size} + #{$gutter}));\n  }\n  @return $offset;\n}\n\n/// Offsets a column to the right/bottom by `$n` columns.\n///\n/// @param {Number|List} $n - Size to offset by. You can pass in any value accepted by the `xy-cell()` mixin, such as `6`, `50%`, or `1 of 2`.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] Map of gutters or single value to use for responsive gutters.\n/// @param {Keyword} $gutter-type [margin] The type of gutter to use. Can be `margin` or `padding`\n/// @param {Number|Array|Keyword} $breakpoint [null] - Breakpoint to use for `$gutters`. It can be a breakpoint name, list of breakpoints or `auto` for all breakpoints. If a list is given, media-queries will be generated. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] Sets the direction of the offset. If set to true will apply margin-top instead.\n@mixin xy-cell-offset(\n $n,\n $gutters: $grid-margin-gutters,\n $gutter-type: margin,\n $breakpoint: null,\n $vertical: false\n) {\n  $breakpoint: -zf-current-breakpoint($breakpoint, $default: $-zf-zero-breakpoint);\n  $direction: if($vertical, 'top', $global-left);\n\n  @include -zf-each-breakpoint-in($breakpoint, $media-queries: 'for-lists') {\n    $offset: xy-cell-offset($n, $gutters, $gutter-type);\n    margin-#{$direction}: #{$offset};\n  }\n}\n","/// Modifies a grid to give it \"frame\" behavior (no overflow, no wrap, stretch behavior)\n///\n/// @param {Boolean} $vertical [false] - Is grid vertical or horizontal. Should match grid.\n/// @param {Boolean} $nested [false] - Is grid nested or not. If nested is true this sets the frame to 100% height, otherwise will be 100vh.\n/// @param {Number|Map} $gutters [null] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from.\n/// @param {Boolean} $include-base [true] - Include the base styles that don't vary per breakpoint.\n@mixin xy-grid-frame(\n  $vertical: false,\n  $nested: false,\n  $gutters: null,\n  $breakpoint: null,\n  $include-base: true\n) {\n\n  @if $include-base {\n    overflow: hidden;\n    position: relative;\n    flex-wrap: nowrap;\n    align-items: stretch;\n  }\n\n  @if $breakpoint == null and type-of($gutters) == 'map' {\n    @include -zf-each-breakpoint() {\n      @include xy-grid-frame($vertical, $nested, $gutters, $-zf-size, false);\n    }\n  } @else {\n    // Get our gutters if applicable\n    $gutter: -zf-get-bp-val($gutters, $breakpoint);\n\n    // If we have a gutter, add it to the width/height\n    @if $gutter {\n      @if $vertical == true {\n        $unit: if($nested == true, 100%, 100vh);\n        $gutter: rem-calc($gutter);\n        height: calc(#{$unit} + #{$gutter});\n      } @else {\n        $unit: if($nested == true, 100%, 100vw);\n        $gutter: rem-calc($gutter);\n        width: calc(#{$unit} + #{$gutter});\n      }\n    }\n    @else {\n      @if $vertical == true {\n        height: if($nested == true, 100%, 100vh);\n      } @else {\n        width: if($nested == true, 100%, 100vw);\n      }\n    }\n  }\n}\n\n/// Modifies a cell to give it \"block\" behavior (overflow auto, inertial scrolling)\n///\n/// @param {Boolean} $vertical [false] - Is grid vertical or horizontal. Should match grid.\n@mixin xy-cell-block(\n  $vertical: false\n) {\n  $property: if($vertical == true, 'overflow-y', 'overflow-x');\n\n  @if $vertical == true {\n    overflow-y: auto;\n    max-height: 100%;\n    min-height: 100%;\n  } @else {\n    overflow-x: auto;\n    max-width: 100%;\n  }\n\n  -webkit-overflow-scrolling: touch;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n}\n\n/// Container for inside a grid frame containing multiple blocks. Typically used\n/// as a modifier for a `.cell` to allow the cell to pass along flex sizing\n/// constraints / from parents to children.\n@mixin xy-cell-block-container() {\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n\n  > .grid-x {\n    max-height: 100%;\n    flex-wrap: nowrap;\n  }\n}\n","html {\n  box-sizing: border-box;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody, input, button {\n  font-family: 'Nunito Sans', sans-serif;\n}\n\nh1 {\n  font-weight: $fw-black;\n  margin: 0;\n}\n","@import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@200;300;400;600;700;900&family=Quicksand&display=swap');\n\n$global-padding: 24px;\n$global-margin: 12px;\n\n$black: #000000;\n$white: #FFFFFF;\n$light-gray: #EBEBEB;\n$gray: #C2C2C2;\n\n$red: #BD1E1E;\n$light-red: #F7CACA;\n$blue: #0093F5;\n$midnight-blue: #004777;\n$dark-blue: #003152;\n$turquoise: #00AFB5;\n\n$fw-extra-light: 200;\n$fw-light: 300;\n$fw-regular: 400;\n$fw-semi-bold: 600;\n$fw-bold: 700;\n$fw-black: 900;\n",".alert {\n  &--error {\n    background-color: $light-red;\n    font-weight: $fw-semi-bold;\n    border: 2px $red solid;\n    border-radius: 6px;\n    padding: $global-padding;\n  }\n}\n",".button {\n  background-color: $white;\n  border: $midnight-blue 2px solid;\n  color: $midnight-blue;\n  font-weight: $fw-bold;\n  font-size: 16px;\n  padding: $global-padding / 4 $global-padding / 2;\n  border-radius: 6px;\n  text-decoration: none;\n  cursor: pointer;\n\n  &:hover {\n    color: $white;\n    background-color: $midnight-blue;\n  }\n\n  &--blue {\n    background-color: $blue;\n    border-color: $blue;\n    color: $white;\n  }\n\n  &--midnight-blue {\n    background-color: $midnight-blue;\n    border-color: $midnight-blue;\n    color: $white;\n\n    &:hover {\n      background-color: $dark-blue;\n      border-color: $dark-blue;\n    }\n  }\n\n  &--red {\n    background-color: $red;\n    border-color: $red;\n    color: $white;\n  }\n\n  &--understated {\n    font-size: 14px;\n    padding: $global-padding / 8 $global-padding / 4;\n  }\n}\n",".footer {\n  color: $white;\n  padding: $global-padding;\n  display: flex;\n  flex-direction: column;\n\n  @include breakpoint(medium up) {\n    flex-direction: row;\n\n    .footer__section {\n      margin-right: $global-margin * 4;\n      margin-bottom: 0;\n    }\n  }\n\n  &__section {\n    margin-bottom: $global-margin;\n  }\n\n  &__header {\n    font-weight: $fw-black;\n    margin-bottom: $global-margin / 4;\n  }\n\n  &__detail {\n    font-weight: $fw-semi-bold;\n    font-size: 12px;\n    margin-bottom: $global-margin / 4;\n\n    &--link {\n      color: $white;\n      display: block;\n\n      &:hover {\n        text-decoration: none;\n      }\n    }\n  }\n}\n",".loading {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  // From https://loading.io/css/\n\n  @keyframes loading--ripple {\n    0% {\n      top: 36px;\n      left: 36px;\n      width: 0;\n      height: 0;\n      opacity: 1;\n    }\n    100% {\n      top: 0px;\n      left: 0px;\n      width: 72px;\n      height: 72px;\n      opacity: 0;\n    }\n  }\n\n  &--ellipsis {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 20px;\n  }\n\n  &--ellipsis div {\n    position: absolute;\n    top: 3px;\n    width: 13px;\n    height: 13px;\n    border-radius: 50%;\n    background: $gray;\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\n  }\n\n  &--ellipsis div:nth-child(1) {\n    left: 8px;\n    animation: loading--ellipsis1 0.6s infinite;\n  }\n\n  &--ellipsis div:nth-child(2) {\n    left: 8px;\n    animation: loading--ellipsis2 0.6s infinite;\n  }\n\n  &--ellipsis div:nth-child(3) {\n    left: 32px;\n    animation: loading--ellipsis2 0.6s infinite;\n  }\n\n  &--ellipsis div:nth-child(4) {\n    left: 56px;\n    animation: loading--ellipsis3 0.6s infinite;\n  }\n\n  @keyframes loading--ellipsis1 {\n    0% {\n      transform: scale(0);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n\n  @keyframes loading--ellipsis3 {\n    0% {\n      transform: scale(1);\n    }\n    100% {\n      transform: scale(0);\n    }\n  }\n\n  @keyframes loading--ellipsis2 {\n    0% {\n      transform: translate(0, 0);\n    }\n    100% {\n      transform: translate(24px, 0);\n    }\n  }\n}\n",".navbar {\n  display: flex;\n  padding: 0 $global-padding;\n  height: 70px;\n  align-items: center;\n  justify-content: space-between;\n\n  &__group {\n    display: flex;\n    align-items: center;\n    height: 100%;\n  }\n\n  &__title {\n    margin: 0;\n    font-size: 40px;\n    text-decoration: none;\n    font-weight: $fw-black;\n    color: $midnight-blue;\n  }\n\n  &__search-form {\n    height: 100%;\n    display: flex;\n    align-items: center;\n  }\n\n  &__search-input {\n    height: 30px;\n    width: 120px;\n    font-size: 16px;\n    margin: 0 $global-margin;\n\n    @include breakpoint(medium) {\n      width: 200px;\n    }\n    @include breakpoint(large up) {\n      width: 380px;\n    }\n  }\n\n  &__search-suggestions {\n    margin: 0 $global-margin;\n\n    @include breakpoint(medium) {\n      width: 200px;\n    }\n    @include breakpoint(large up) {\n      width: 380px;\n    }\n  }\n\n  &__search-submit {\n    margin: 0 $global-margin;\n  }\n\n  &__user {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    font-size: 16px;\n    font-weight: $fw-semi-bold;\n  }\n\n  &__user-actions {\n    position: relative;\n    height: 100%;\n    padding: $global-padding / 2 $global-padding;\n\n    &:hover {\n      background-color: $light-gray;\n\n      .navbar__dropdown {\n        display: flex;\n      }\n    }\n  }\n\n  &__dropdown {\n    display: none;\n    position: absolute;\n    width: 150px;\n    padding: $global-padding / 2;\n    right: 0;\n    top: 70px;\n    border: 1px $gray solid;\n    align-items: center;\n    flex-direction: column;\n\n    a {\n      font-size: 14px;\n      margin-bottom: $global-margin;\n    }\n  }\n\n  &--mobile {\n    @include breakpoint(large up) {\n      display: none;\n    }\n  }\n\n  &--desktop {\n    @include breakpoint(medium down) {\n      display: none;\n    }\n  }\n}\n",".page-wrapper {\n  background-color: $light-gray;\n  display: flex;\n  justify-content: center;\n  min-height: 80vh;\n\n  @include breakpoint(medium up) {\n    padding: 0 $global-padding /2;\n  }\n\n  &__content {\n    background-color: $white;\n    width: 100%;\n\n    @include breakpoint(medium) {\n      width: map-get($breakpoints, \"medium\");\n    }\n\n    @include breakpoint(large) {\n      width: map-get($breakpoints, \"large\");\n    }\n\n    @include breakpoint(xlarge) {\n      width: map-get($breakpoints, \"xlarge\");\n    }\n\n    @include breakpoint(xxlarge) {\n      width: map-get($breakpoints, \"xxlarge\");\n    }\n  }\n\n  &--navbar {\n    background-color: $white;\n    border-bottom: gray 2px solid;\n    min-height: 0;\n  }\n\n  &--footer {\n    background-color: $dark-blue;\n    min-height: 0;\n    justify-content: left;\n  }\n}\n\n.page {\n  padding: $global-padding;\n}\n",".player {\n\n  &__body {\n    display: flex;\n    flex-direction: column;\n\n    @include breakpoint(large up) {\n      flex-direction: row;\n    }\n  }\n\n  &__table {\n    align-self: center;\n    margin-bottom: $global-margin;\n\n    @include breakpoint(large up) {\n      align-self: auto;\n    }\n  }\n\n  &__chart {\n    height: 400px;\n    display: flex;\n    flex-grow: 1;\n  }\n}\n","$table-border: $black solid 1px;\n\n.table {\n  border-collapse: collapse;\n  font-weight: $fw-semi-bold;\n\n  &__row {\n    border-top: $table-border;\n\n    &:nth-child(even) {\n      background-color: $light-gray;\n    }\n\n    &:last-child {\n      border-bottom: $table-border;\n    }\n\n    &--head {\n      background-color: $gray;\n    }\n  }\n\n  &__data {\n    border-right: $table-border;\n\n    &:first-child {\n      border-left: $table-border;\n    }\n  }\n}\n\n.table-container {\n  overflow: scroll;\n\n  @include breakpoint(large up) {\n    overflow: unset;\n  }\n}\n",".teams-list {\n  margin-bottom: $global-margin;\n\n  &__team {\n    font-size: 18px;\n    font-weight: $fw-semi-bold;\n    margin-bottom: $global-margin;\n  }\n}\n\n.team {\n  &__title {\n    font-size: 36px;\n    font-weight: $fw-black;\n  }\n\n  &__action {\n    cursor: pointer;\n\n    &--icon {\n      font-size: 24px;\n      margin-left: $global-margin / 2;\n    }\n  }\n\n  &__column {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n}\n\n.lineup-player {\n  display: flex;\n  align-items: center;\n\n  &__action {\n    margin-left: $global-margin / 4;\n  }\n\n  &__form {\n    display: flex;\n    align-items: center;\n\n    input {\n      width: 100px;\n    }\n  }\n\n  &__form-actions {\n    display: flex;\n  }\n}\n\n.team-field {\n  $small-size: 300px;\n  $large-size: 400px;\n\n  height: $small-size;\n  width: $small-size;\n  position: relative;\n  background-size: $small-size;\n  background-repeat: no-repeat;\n  background-position: center bottom;\n  font-size: 12px;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: rgba(255,255,255,0.8);\n  }\n\n  @include breakpoint(medium up) {\n    font-size: 14px;\n    height: $large-size;\n    width: $large-size;\n    background-size: $large-size;\n  }\n\n  &__form-actions {\n    position: absolute;\n    bottom: -12px;\n    display: flex;\n    justify-content: space-around;\n    width: $small-size;\n\n    @include breakpoint(medium up) {\n      width: $large-size;\n    }\n  }\n\n  &__player {\n    position: absolute;\n    background-color: $white;\n    padding: $global-padding / 4;\n    border: 1px $black solid;\n    border-radius: 3px;\n\n    &--pitcher {\n      bottom: 40%;\n      left: 50%;\n      transform: translate(-50%, 0);\n    }\n\n    &--catcher {\n      bottom: 10%;\n      left: 50%;\n      transform: translate(-50%, 0);\n    }\n\n    &--first-base {\n      bottom: 40%;\n      left: 85%;\n      transform: translate(-50%, 0);\n    }\n\n    &--second-base {\n      bottom: 60%;\n      left: 70%;\n      transform: translate(-50%, 0);\n    }\n\n    &--third-base {\n      bottom: 40%;\n      left: 15%;\n      transform: translate(-50%, 0);\n    }\n\n    &--short-stop {\n      bottom: 60%;\n      left: 30%;\n      transform: translate(-50%, 0);\n    }\n\n    &--left-fielder {\n      bottom: 75%;\n      left: 15%;\n      transform: translate(-50%, 0);\n    }\n\n    &--center-fielder {\n      bottom: 90%;\n      left: 50%;\n      transform: translate(-50%, 0);\n    }\n\n    &--right-fielder {\n      bottom: 75%;\n      left: 85%;\n      transform: translate(-50%, 0);\n    }\n  }\n}\n","$typeahead-border: 1px $dark-gray solid;\n\n.typeahead {\n  position: relative;\n}\n\n.typeahead-results {\n  position: absolute;\n  z-index: 1000;\n  background-color: $white;\n  border: $typeahead-border;\n\n  &__result {\n    padding: $global-padding / 4;\n    border-bottom: $typeahead-border;\n    cursor: pointer;\n\n    &:last-child {\n      border-bottom: none;\n    }\n\n    &:hover {\n      background-color: $blue;\n    }\n  }\n}\n"]}